# This file was generated by `thrift/test/testset/generator.py`
# @generated

include "thrift/annotation/cpp.thrift"
include "thrift/annotation/thrift.thrift"

namespace cpp2 apache.thrift.test.testset
namespace py3 thrift.test
namespace php apache_thrift
namespace py thrift.test.testset
namespace py.asyncio thrift_asyncio.test.testset
namespace java.swift org.apache.thrift.test
namespace go thrift.test.testset

struct struct_empty {
} (thrift.uri="facebook.com/thrift/test/testset/struct_empty")
struct struct_list_bool {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool")
struct struct_list_byte {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte")
struct struct_list_i16 {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16")
struct struct_list_i32 {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32")
struct struct_list_i64 {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64")
struct struct_list_float {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float")
struct struct_list_double {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double")
struct struct_list_binary {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary")
struct struct_list_string {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string")
struct struct_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string")
struct struct_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64")
struct struct_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool")
struct struct_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte")
struct struct_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16")
struct struct_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32")
struct struct_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64")
struct struct_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float")
struct struct_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double")
struct struct_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary")
struct struct_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string")
struct struct_map_i64_bool {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool")
struct struct_map_i64_byte {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte")
struct struct_map_i64_i16 {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16")
struct struct_map_i64_i32 {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32")
struct struct_map_i64_i64 {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64")
struct struct_map_i64_float {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float")
struct struct_map_i64_double {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double")
struct struct_map_i64_binary {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary")
struct struct_map_i64_string {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string")
struct struct_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string")
struct struct_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64")
struct struct_map_i64_set_string {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string")
struct struct_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64")
struct struct_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_cpp_ref")
struct struct_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_cpp_ref")
struct struct_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_cpp_ref")
struct struct_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_cpp_ref")
struct struct_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_cpp_ref")
struct struct_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_cpp_ref")
struct struct_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_cpp_ref")
struct struct_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_cpp_ref")
struct struct_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_cpp_ref")
struct struct_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_cpp_ref")
struct struct_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_cpp_ref")
struct struct_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_cpp_ref")
struct struct_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_cpp_ref")
struct struct_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_cpp_ref")
struct struct_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_cpp_ref")
struct struct_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_cpp_ref")
struct struct_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_cpp_ref")
struct struct_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_cpp_ref")
struct struct_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_cpp_ref")
struct struct_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_cpp_ref")
struct struct_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_cpp_ref")
struct struct_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_cpp_ref")
struct struct_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_cpp_ref")
struct struct_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_cpp_ref")
struct struct_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_cpp_ref")
struct struct_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_cpp_ref")
struct struct_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_cpp_ref")
struct struct_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_cpp_ref")
struct struct_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_cpp_ref")
struct struct_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_cpp_ref")
struct struct_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_cpp_ref")
struct struct_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_cpp_ref")
struct struct_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_cpp_ref")
struct struct_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_shared_cpp_ref")
struct struct_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_shared_cpp_ref")
struct struct_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_shared_cpp_ref")
struct struct_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_shared_cpp_ref")
struct struct_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_shared_cpp_ref")
struct struct_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_shared_cpp_ref")
struct struct_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_shared_cpp_ref")
struct struct_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_shared_cpp_ref")
struct struct_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_shared_cpp_ref")
struct struct_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_shared_cpp_ref")
struct struct_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_shared_cpp_ref")
struct struct_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_shared_cpp_ref")
struct struct_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_shared_cpp_ref")
struct struct_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_shared_cpp_ref")
struct struct_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_shared_cpp_ref")
struct struct_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_shared_cpp_ref")
struct struct_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_shared_cpp_ref")
struct struct_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_shared_cpp_ref")
struct struct_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_shared_cpp_ref")
struct struct_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_shared_cpp_ref")
struct struct_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_shared_cpp_ref")
struct struct_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_shared_cpp_ref")
struct struct_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_shared_cpp_ref")
struct struct_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_shared_cpp_ref")
struct struct_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_shared_cpp_ref")
struct struct_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_shared_cpp_ref")
struct struct_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_shared_cpp_ref")
struct struct_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_shared_cpp_ref")
struct struct_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_shared_cpp_ref")
struct struct_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_shared_cpp_ref")
struct struct_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_shared_cpp_ref")
struct struct_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_shared_cpp_ref")
struct struct_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_shared_cpp_ref")
struct struct_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool")
struct struct_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte")
struct struct_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16")
struct struct_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32")
struct struct_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64")
struct struct_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float")
struct struct_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double")
struct struct_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary")
struct struct_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string")
struct struct_bool_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_custom_default")
struct struct_byte_custom_default {
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_custom_default")
struct struct_i16_custom_default {
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_custom_default")
struct struct_i32_custom_default {
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_custom_default")
struct struct_i64_custom_default {
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_custom_default")
struct struct_float_custom_default {
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_custom_default")
struct struct_double_custom_default {
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_custom_default")
struct struct_binary_custom_default {
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_custom_default")
struct struct_string_custom_default {
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_custom_default")
struct struct_bool_alternative_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool_alternative_custom_default")
struct struct_byte_alternative_custom_default {
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte_alternative_custom_default")
struct struct_i16_alternative_custom_default {
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16_alternative_custom_default")
struct struct_i32_alternative_custom_default {
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32_alternative_custom_default")
struct struct_i64_alternative_custom_default {
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64_alternative_custom_default")
struct struct_float_alternative_custom_default {
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float_alternative_custom_default")
struct struct_double_alternative_custom_default {
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double_alternative_custom_default")
struct struct_binary_alternative_custom_default {
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary_alternative_custom_default")
struct struct_string_alternative_custom_default {
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_alternative_custom_default")
struct struct_optional_list_bool {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool")
struct struct_optional_list_byte {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte")
struct struct_optional_list_i16 {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16")
struct struct_optional_list_i32 {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32")
struct struct_optional_list_i64 {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64")
struct struct_optional_list_float {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float")
struct struct_optional_list_double {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double")
struct struct_optional_list_binary {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary")
struct struct_optional_list_string {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string")
struct struct_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string")
struct struct_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64")
struct struct_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool")
struct struct_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte")
struct struct_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16")
struct struct_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32")
struct struct_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64")
struct struct_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float")
struct struct_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double")
struct struct_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary")
struct struct_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string")
struct struct_optional_map_i64_bool {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool")
struct struct_optional_map_i64_byte {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte")
struct struct_optional_map_i64_i16 {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16")
struct struct_optional_map_i64_i32 {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32")
struct struct_optional_map_i64_i64 {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64")
struct struct_optional_map_i64_float {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float")
struct struct_optional_map_i64_double {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double")
struct struct_optional_map_i64_binary {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary")
struct struct_optional_map_i64_string {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string")
struct struct_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string")
struct struct_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64")
struct struct_optional_map_i64_set_string {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string")
struct struct_optional_map_i64_set_i64 {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64")
struct struct_optional_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_cpp_ref")
struct struct_optional_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_cpp_ref")
struct struct_optional_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_cpp_ref")
struct struct_optional_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_cpp_ref")
struct struct_optional_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_cpp_ref")
struct struct_optional_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_cpp_ref")
struct struct_optional_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_cpp_ref")
struct struct_optional_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_cpp_ref")
struct struct_optional_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_cpp_ref")
struct struct_optional_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_cpp_ref")
struct struct_optional_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_cpp_ref")
struct struct_optional_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_cpp_ref")
struct struct_optional_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_cpp_ref")
struct struct_optional_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_cpp_ref")
struct struct_optional_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_cpp_ref")
struct struct_optional_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_cpp_ref")
struct struct_optional_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_cpp_ref")
struct struct_optional_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_cpp_ref")
struct struct_optional_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_cpp_ref")
struct struct_optional_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_cpp_ref")
struct struct_optional_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_cpp_ref")
struct struct_optional_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_cpp_ref")
struct struct_optional_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_cpp_ref")
struct struct_optional_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_cpp_ref")
struct struct_optional_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_cpp_ref")
struct struct_optional_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_cpp_ref")
struct struct_optional_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_cpp_ref")
struct struct_optional_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_cpp_ref")
struct struct_optional_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_cpp_ref")
struct struct_optional_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_cpp_ref")
struct struct_optional_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_cpp_ref")
struct struct_optional_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_cpp_ref")
struct struct_optional_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_cpp_ref")
struct struct_optional_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_shared_cpp_ref")
struct struct_optional_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_shared_cpp_ref")
struct struct_optional_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_shared_cpp_ref")
struct struct_optional_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_shared_cpp_ref")
struct struct_optional_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_shared_cpp_ref")
struct struct_optional_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_shared_cpp_ref")
struct struct_optional_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_shared_cpp_ref")
struct struct_optional_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_shared_cpp_ref")
struct struct_optional_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_shared_cpp_ref")
struct struct_optional_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_shared_cpp_ref")
struct struct_optional_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_shared_cpp_ref")
struct struct_optional_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_shared_cpp_ref")
struct struct_optional_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_shared_cpp_ref")
struct struct_optional_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_shared_cpp_ref")
struct struct_optional_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_shared_cpp_ref")
struct struct_optional_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_shared_cpp_ref")
struct struct_optional_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_shared_cpp_ref")
struct struct_optional_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_shared_cpp_ref")
struct struct_optional_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_shared_cpp_ref")
struct struct_optional_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_shared_cpp_ref")
struct struct_optional_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_shared_cpp_ref")
struct struct_optional_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_shared_cpp_ref")
struct struct_optional_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_shared_cpp_ref")
struct struct_optional_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_shared_cpp_ref")
struct struct_optional_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_shared_cpp_ref")
struct struct_optional_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_shared_cpp_ref")
struct struct_optional_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_shared_cpp_ref")
struct struct_optional_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_shared_cpp_ref")
struct struct_optional_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_shared_cpp_ref")
struct struct_optional_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_shared_cpp_ref")
struct struct_optional_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_shared_cpp_ref")
struct struct_optional_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_shared_cpp_ref")
struct struct_optional_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_shared_cpp_ref")
struct struct_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool")
struct struct_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte")
struct struct_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16")
struct struct_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32")
struct struct_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64")
struct struct_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float")
struct struct_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double")
struct struct_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary")
struct struct_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string")
struct struct_optional_bool_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_custom_default")
struct struct_optional_byte_custom_default {
  1: optional byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_custom_default")
struct struct_optional_i16_custom_default {
  1: optional i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_custom_default")
struct struct_optional_i32_custom_default {
  1: optional i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_custom_default")
struct struct_optional_i64_custom_default {
  1: optional i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_custom_default")
struct struct_optional_float_custom_default {
  1: optional float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_custom_default")
struct struct_optional_double_custom_default {
  1: optional double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_custom_default")
struct struct_optional_binary_custom_default {
  1: optional binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_custom_default")
struct struct_optional_string_custom_default {
  1: optional string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_custom_default")
struct struct_optional_bool_alternative_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool_alternative_custom_default")
struct struct_optional_byte_alternative_custom_default {
  1: optional byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte_alternative_custom_default")
struct struct_optional_i16_alternative_custom_default {
  1: optional i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16_alternative_custom_default")
struct struct_optional_i32_alternative_custom_default {
  1: optional i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32_alternative_custom_default")
struct struct_optional_i64_alternative_custom_default {
  1: optional i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64_alternative_custom_default")
struct struct_optional_float_alternative_custom_default {
  1: optional float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float_alternative_custom_default")
struct struct_optional_double_alternative_custom_default {
  1: optional double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double_alternative_custom_default")
struct struct_optional_binary_alternative_custom_default {
  1: optional binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary_alternative_custom_default")
struct struct_optional_string_alternative_custom_default {
  1: optional string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string_alternative_custom_default")
struct struct_required_list_bool {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool")
struct struct_required_list_byte {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte")
struct struct_required_list_i16 {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16")
struct struct_required_list_i32 {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32")
struct struct_required_list_i64 {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64")
struct struct_required_list_float {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float")
struct struct_required_list_double {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double")
struct struct_required_list_binary {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary")
struct struct_required_list_string {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string")
struct struct_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string")
struct struct_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64")
struct struct_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool")
struct struct_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte")
struct struct_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16")
struct struct_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32")
struct struct_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64")
struct struct_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float")
struct struct_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double")
struct struct_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary")
struct struct_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string")
struct struct_required_map_i64_bool {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool")
struct struct_required_map_i64_byte {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte")
struct struct_required_map_i64_i16 {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16")
struct struct_required_map_i64_i32 {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32")
struct struct_required_map_i64_i64 {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64")
struct struct_required_map_i64_float {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float")
struct struct_required_map_i64_double {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double")
struct struct_required_map_i64_binary {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary")
struct struct_required_map_i64_string {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string")
struct struct_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string")
struct struct_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64")
struct struct_required_map_i64_set_string {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string")
struct struct_required_map_i64_set_i64 {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64")
struct struct_required_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_cpp_ref")
struct struct_required_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_cpp_ref")
struct struct_required_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_cpp_ref")
struct struct_required_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_cpp_ref")
struct struct_required_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_cpp_ref")
struct struct_required_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_cpp_ref")
struct struct_required_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_cpp_ref")
struct struct_required_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_cpp_ref")
struct struct_required_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_cpp_ref")
struct struct_required_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_cpp_ref")
struct struct_required_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_cpp_ref")
struct struct_required_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_cpp_ref")
struct struct_required_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_cpp_ref")
struct struct_required_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_cpp_ref")
struct struct_required_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_cpp_ref")
struct struct_required_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_cpp_ref")
struct struct_required_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_cpp_ref")
struct struct_required_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_cpp_ref")
struct struct_required_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_cpp_ref")
struct struct_required_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_cpp_ref")
struct struct_required_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_cpp_ref")
struct struct_required_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_cpp_ref")
struct struct_required_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_cpp_ref")
struct struct_required_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_cpp_ref")
struct struct_required_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_cpp_ref")
struct struct_required_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_cpp_ref")
struct struct_required_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_cpp_ref")
struct struct_required_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_cpp_ref")
struct struct_required_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_cpp_ref")
struct struct_required_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_cpp_ref")
struct struct_required_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_cpp_ref")
struct struct_required_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_cpp_ref")
struct struct_required_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_cpp_ref")
struct struct_required_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_shared_cpp_ref")
struct struct_required_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_shared_cpp_ref")
struct struct_required_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_shared_cpp_ref")
struct struct_required_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_shared_cpp_ref")
struct struct_required_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_shared_cpp_ref")
struct struct_required_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_shared_cpp_ref")
struct struct_required_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_shared_cpp_ref")
struct struct_required_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_shared_cpp_ref")
struct struct_required_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_shared_cpp_ref")
struct struct_required_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_shared_cpp_ref")
struct struct_required_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_shared_cpp_ref")
struct struct_required_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_shared_cpp_ref")
struct struct_required_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_shared_cpp_ref")
struct struct_required_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_shared_cpp_ref")
struct struct_required_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_shared_cpp_ref")
struct struct_required_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_shared_cpp_ref")
struct struct_required_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_shared_cpp_ref")
struct struct_required_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_shared_cpp_ref")
struct struct_required_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_shared_cpp_ref")
struct struct_required_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_shared_cpp_ref")
struct struct_required_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_shared_cpp_ref")
struct struct_required_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_shared_cpp_ref")
struct struct_required_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_shared_cpp_ref")
struct struct_required_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_shared_cpp_ref")
struct struct_required_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_shared_cpp_ref")
struct struct_required_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_shared_cpp_ref")
struct struct_required_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_shared_cpp_ref")
struct struct_required_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_shared_cpp_ref")
struct struct_required_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_shared_cpp_ref")
struct struct_required_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_shared_cpp_ref")
struct struct_required_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_shared_cpp_ref")
struct struct_required_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_shared_cpp_ref")
struct struct_required_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_shared_cpp_ref")
struct struct_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool")
struct struct_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte")
struct struct_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16")
struct struct_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32")
struct struct_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64")
struct struct_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float")
struct struct_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double")
struct struct_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary")
struct struct_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string")
struct struct_required_bool_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_custom_default")
struct struct_required_byte_custom_default {
  1: required byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_custom_default")
struct struct_required_i16_custom_default {
  1: required i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_custom_default")
struct struct_required_i32_custom_default {
  1: required i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_custom_default")
struct struct_required_i64_custom_default {
  1: required i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_custom_default")
struct struct_required_float_custom_default {
  1: required float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_custom_default")
struct struct_required_double_custom_default {
  1: required double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_custom_default")
struct struct_required_binary_custom_default {
  1: required binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_custom_default")
struct struct_required_string_custom_default {
  1: required string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_custom_default")
struct struct_required_bool_alternative_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool_alternative_custom_default")
struct struct_required_byte_alternative_custom_default {
  1: required byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte_alternative_custom_default")
struct struct_required_i16_alternative_custom_default {
  1: required i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16_alternative_custom_default")
struct struct_required_i32_alternative_custom_default {
  1: required i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32_alternative_custom_default")
struct struct_required_i64_alternative_custom_default {
  1: required i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64_alternative_custom_default")
struct struct_required_float_alternative_custom_default {
  1: required float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float_alternative_custom_default")
struct struct_required_double_alternative_custom_default {
  1: required double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double_alternative_custom_default")
struct struct_required_binary_alternative_custom_default {
  1: required binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary_alternative_custom_default")
struct struct_required_string_alternative_custom_default {
  1: required string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string_alternative_custom_default")
struct struct_terse_list_bool {
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool")
struct struct_terse_list_byte {
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte")
struct struct_terse_list_i16 {
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16")
struct struct_terse_list_i32 {
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32")
struct struct_terse_list_i64 {
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64")
struct struct_terse_list_float {
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float")
struct struct_terse_list_double {
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double")
struct struct_terse_list_binary {
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary")
struct struct_terse_list_string {
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string")
struct struct_terse_set_string {
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string")
struct struct_terse_set_i64 {
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64")
struct struct_terse_map_string_bool {
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool")
struct struct_terse_map_string_byte {
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte")
struct struct_terse_map_string_i16 {
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16")
struct struct_terse_map_string_i32 {
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32")
struct struct_terse_map_string_i64 {
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64")
struct struct_terse_map_string_float {
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float")
struct struct_terse_map_string_double {
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double")
struct struct_terse_map_string_binary {
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary")
struct struct_terse_map_string_string {
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string")
struct struct_terse_map_i64_bool {
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool")
struct struct_terse_map_i64_byte {
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte")
struct struct_terse_map_i64_i16 {
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16")
struct struct_terse_map_i64_i32 {
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32")
struct struct_terse_map_i64_i64 {
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64")
struct struct_terse_map_i64_float {
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float")
struct struct_terse_map_i64_double {
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double")
struct struct_terse_map_i64_binary {
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary")
struct struct_terse_map_i64_string {
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string")
struct struct_terse_map_string_set_string {
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string")
struct struct_terse_map_string_set_i64 {
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64")
struct struct_terse_map_i64_set_string {
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string")
struct struct_terse_map_i64_set_i64 {
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64")
struct struct_terse_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool_cpp_ref")
struct struct_terse_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte_cpp_ref")
struct struct_terse_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16_cpp_ref")
struct struct_terse_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32_cpp_ref")
struct struct_terse_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64_cpp_ref")
struct struct_terse_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float_cpp_ref")
struct struct_terse_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double_cpp_ref")
struct struct_terse_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary_cpp_ref")
struct struct_terse_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string_cpp_ref")
struct struct_terse_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string_cpp_ref")
struct struct_terse_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64_cpp_ref")
struct struct_terse_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool_cpp_ref")
struct struct_terse_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte_cpp_ref")
struct struct_terse_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16_cpp_ref")
struct struct_terse_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32_cpp_ref")
struct struct_terse_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64_cpp_ref")
struct struct_terse_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float_cpp_ref")
struct struct_terse_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double_cpp_ref")
struct struct_terse_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary_cpp_ref")
struct struct_terse_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string_cpp_ref")
struct struct_terse_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool_cpp_ref")
struct struct_terse_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte_cpp_ref")
struct struct_terse_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16_cpp_ref")
struct struct_terse_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32_cpp_ref")
struct struct_terse_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64_cpp_ref")
struct struct_terse_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float_cpp_ref")
struct struct_terse_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double_cpp_ref")
struct struct_terse_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary_cpp_ref")
struct struct_terse_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string_cpp_ref")
struct struct_terse_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string_cpp_ref")
struct struct_terse_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64_cpp_ref")
struct struct_terse_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string_cpp_ref")
struct struct_terse_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64_cpp_ref")
struct struct_terse_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_bool_shared_cpp_ref")
struct struct_terse_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_byte_shared_cpp_ref")
struct struct_terse_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i16_shared_cpp_ref")
struct struct_terse_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i32_shared_cpp_ref")
struct struct_terse_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_i64_shared_cpp_ref")
struct struct_terse_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_float_shared_cpp_ref")
struct struct_terse_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_double_shared_cpp_ref")
struct struct_terse_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_binary_shared_cpp_ref")
struct struct_terse_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_list_string_shared_cpp_ref")
struct struct_terse_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_string_shared_cpp_ref")
struct struct_terse_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_set_i64_shared_cpp_ref")
struct struct_terse_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_bool_shared_cpp_ref")
struct struct_terse_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_byte_shared_cpp_ref")
struct struct_terse_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i16_shared_cpp_ref")
struct struct_terse_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i32_shared_cpp_ref")
struct struct_terse_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_i64_shared_cpp_ref")
struct struct_terse_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_float_shared_cpp_ref")
struct struct_terse_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_double_shared_cpp_ref")
struct struct_terse_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_binary_shared_cpp_ref")
struct struct_terse_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_string_shared_cpp_ref")
struct struct_terse_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_bool_shared_cpp_ref")
struct struct_terse_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_byte_shared_cpp_ref")
struct struct_terse_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i16_shared_cpp_ref")
struct struct_terse_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i32_shared_cpp_ref")
struct struct_terse_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_i64_shared_cpp_ref")
struct struct_terse_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_float_shared_cpp_ref")
struct struct_terse_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_double_shared_cpp_ref")
struct struct_terse_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_binary_shared_cpp_ref")
struct struct_terse_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_string_shared_cpp_ref")
struct struct_terse_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_string_shared_cpp_ref")
struct struct_terse_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_string_set_i64_shared_cpp_ref")
struct struct_terse_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_string_shared_cpp_ref")
struct struct_terse_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_map_i64_set_i64_shared_cpp_ref")
struct struct_terse_bool {
  @thrift.TerseWrite
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool")
struct struct_terse_byte {
  @thrift.TerseWrite
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte")
struct struct_terse_i16 {
  @thrift.TerseWrite
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16")
struct struct_terse_i32 {
  @thrift.TerseWrite
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32")
struct struct_terse_i64 {
  @thrift.TerseWrite
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64")
struct struct_terse_float {
  @thrift.TerseWrite
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float")
struct struct_terse_double {
  @thrift.TerseWrite
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double")
struct struct_terse_binary {
  @thrift.TerseWrite
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary")
struct struct_terse_string {
  @thrift.TerseWrite
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string")
struct struct_terse_bool_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool_custom_default")
struct struct_terse_byte_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte_custom_default")
struct struct_terse_i16_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16_custom_default")
struct struct_terse_i32_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32_custom_default")
struct struct_terse_i64_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64_custom_default")
struct struct_terse_float_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float_custom_default")
struct struct_terse_double_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double_custom_default")
struct struct_terse_binary_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary_custom_default")
struct struct_terse_string_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string_custom_default")
struct struct_terse_bool_alternative_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_bool_alternative_custom_default")
struct struct_terse_byte_alternative_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_byte_alternative_custom_default")
struct struct_terse_i16_alternative_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i16_alternative_custom_default")
struct struct_terse_i32_alternative_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i32_alternative_custom_default")
struct struct_terse_i64_alternative_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_i64_alternative_custom_default")
struct struct_terse_float_alternative_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_float_alternative_custom_default")
struct struct_terse_double_alternative_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_double_alternative_custom_default")
struct struct_terse_binary_alternative_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_binary_alternative_custom_default")
struct struct_terse_string_alternative_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/struct_terse_string_alternative_custom_default")
struct struct_optional_list_bool_box {
  @thrift.Box
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_box")
struct struct_optional_list_byte_box {
  @thrift.Box
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_box")
struct struct_optional_list_i16_box {
  @thrift.Box
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_box")
struct struct_optional_list_i32_box {
  @thrift.Box
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_box")
struct struct_optional_list_i64_box {
  @thrift.Box
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_box")
struct struct_optional_list_float_box {
  @thrift.Box
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_box")
struct struct_optional_list_double_box {
  @thrift.Box
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_box")
struct struct_optional_list_binary_box {
  @thrift.Box
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_box")
struct struct_optional_list_string_box {
  @thrift.Box
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_box")
struct struct_optional_set_string_box {
  @thrift.Box
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_box")
struct struct_optional_set_i64_box {
  @thrift.Box
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_box")
struct struct_optional_map_string_bool_box {
  @thrift.Box
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_box")
struct struct_optional_map_string_byte_box {
  @thrift.Box
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_box")
struct struct_optional_map_string_i16_box {
  @thrift.Box
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_box")
struct struct_optional_map_string_i32_box {
  @thrift.Box
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_box")
struct struct_optional_map_string_i64_box {
  @thrift.Box
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_box")
struct struct_optional_map_string_float_box {
  @thrift.Box
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_box")
struct struct_optional_map_string_double_box {
  @thrift.Box
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_box")
struct struct_optional_map_string_binary_box {
  @thrift.Box
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_box")
struct struct_optional_map_string_string_box {
  @thrift.Box
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_box")
struct struct_optional_map_i64_bool_box {
  @thrift.Box
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_box")
struct struct_optional_map_i64_byte_box {
  @thrift.Box
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_box")
struct struct_optional_map_i64_i16_box {
  @thrift.Box
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_box")
struct struct_optional_map_i64_i32_box {
  @thrift.Box
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_box")
struct struct_optional_map_i64_i64_box {
  @thrift.Box
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_box")
struct struct_optional_map_i64_float_box {
  @thrift.Box
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_box")
struct struct_optional_map_i64_double_box {
  @thrift.Box
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_box")
struct struct_optional_map_i64_binary_box {
  @thrift.Box
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_box")
struct struct_optional_map_i64_string_box {
  @thrift.Box
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_box")
struct struct_optional_map_string_set_string_box {
  @thrift.Box
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_box")
struct struct_optional_map_string_set_i64_box {
  @thrift.Box
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_box")
struct struct_optional_map_i64_set_string_box {
  @thrift.Box
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_box")
struct struct_optional_map_i64_set_i64_box {
  @thrift.Box
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_box")
struct struct_list_bool_lazy {
  @cpp.Lazy
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_lazy")
struct struct_list_byte_lazy {
  @cpp.Lazy
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_lazy")
struct struct_list_i16_lazy {
  @cpp.Lazy
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_lazy")
struct struct_list_i32_lazy {
  @cpp.Lazy
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_lazy")
struct struct_list_i64_lazy {
  @cpp.Lazy
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_lazy")
struct struct_list_float_lazy {
  @cpp.Lazy
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_lazy")
struct struct_list_double_lazy {
  @cpp.Lazy
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_lazy")
struct struct_list_binary_lazy {
  @cpp.Lazy
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_lazy")
struct struct_list_string_lazy {
  @cpp.Lazy
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_lazy")
struct struct_set_string_lazy {
  @cpp.Lazy
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_lazy")
struct struct_set_i64_lazy {
  @cpp.Lazy
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_lazy")
struct struct_map_string_bool_lazy {
  @cpp.Lazy
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_lazy")
struct struct_map_string_byte_lazy {
  @cpp.Lazy
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_lazy")
struct struct_map_string_i16_lazy {
  @cpp.Lazy
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_lazy")
struct struct_map_string_i32_lazy {
  @cpp.Lazy
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_lazy")
struct struct_map_string_i64_lazy {
  @cpp.Lazy
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_lazy")
struct struct_map_string_float_lazy {
  @cpp.Lazy
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_lazy")
struct struct_map_string_double_lazy {
  @cpp.Lazy
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_lazy")
struct struct_map_string_binary_lazy {
  @cpp.Lazy
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_lazy")
struct struct_map_string_string_lazy {
  @cpp.Lazy
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_lazy")
struct struct_map_i64_bool_lazy {
  @cpp.Lazy
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_lazy")
struct struct_map_i64_byte_lazy {
  @cpp.Lazy
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_lazy")
struct struct_map_i64_i16_lazy {
  @cpp.Lazy
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_lazy")
struct struct_map_i64_i32_lazy {
  @cpp.Lazy
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_lazy")
struct struct_map_i64_i64_lazy {
  @cpp.Lazy
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_lazy")
struct struct_map_i64_float_lazy {
  @cpp.Lazy
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_lazy")
struct struct_map_i64_double_lazy {
  @cpp.Lazy
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_lazy")
struct struct_map_i64_binary_lazy {
  @cpp.Lazy
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_lazy")
struct struct_map_i64_string_lazy {
  @cpp.Lazy
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_lazy")
struct struct_map_string_set_string_lazy {
  @cpp.Lazy
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_lazy")
struct struct_map_string_set_i64_lazy {
  @cpp.Lazy
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_lazy")
struct struct_map_i64_set_string_lazy {
  @cpp.Lazy
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_lazy")
struct struct_map_i64_set_i64_lazy {
  @cpp.Lazy
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_lazy")
struct struct_string_lazy {
  @cpp.Lazy
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_lazy")
exception exception_empty {
} (thrift.uri="facebook.com/thrift/test/testset/exception_empty")
exception exception_list_bool {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool")
exception exception_list_byte {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte")
exception exception_list_i16 {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16")
exception exception_list_i32 {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32")
exception exception_list_i64 {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64")
exception exception_list_float {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float")
exception exception_list_double {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double")
exception exception_list_binary {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary")
exception exception_list_string {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string")
exception exception_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string")
exception exception_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64")
exception exception_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool")
exception exception_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte")
exception exception_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16")
exception exception_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32")
exception exception_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64")
exception exception_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float")
exception exception_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double")
exception exception_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary")
exception exception_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string")
exception exception_map_i64_bool {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool")
exception exception_map_i64_byte {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte")
exception exception_map_i64_i16 {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16")
exception exception_map_i64_i32 {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32")
exception exception_map_i64_i64 {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64")
exception exception_map_i64_float {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float")
exception exception_map_i64_double {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double")
exception exception_map_i64_binary {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary")
exception exception_map_i64_string {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string")
exception exception_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string")
exception exception_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64")
exception exception_map_i64_set_string {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string")
exception exception_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64")
exception exception_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_cpp_ref")
exception exception_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_cpp_ref")
exception exception_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_cpp_ref")
exception exception_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_cpp_ref")
exception exception_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_cpp_ref")
exception exception_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_cpp_ref")
exception exception_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_cpp_ref")
exception exception_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_cpp_ref")
exception exception_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_cpp_ref")
exception exception_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_cpp_ref")
exception exception_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_cpp_ref")
exception exception_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_cpp_ref")
exception exception_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_cpp_ref")
exception exception_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_cpp_ref")
exception exception_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_cpp_ref")
exception exception_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_cpp_ref")
exception exception_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_cpp_ref")
exception exception_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_cpp_ref")
exception exception_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_cpp_ref")
exception exception_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_cpp_ref")
exception exception_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_cpp_ref")
exception exception_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_cpp_ref")
exception exception_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_cpp_ref")
exception exception_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_cpp_ref")
exception exception_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_cpp_ref")
exception exception_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_cpp_ref")
exception exception_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_cpp_ref")
exception exception_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_cpp_ref")
exception exception_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_cpp_ref")
exception exception_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_cpp_ref")
exception exception_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_cpp_ref")
exception exception_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_cpp_ref")
exception exception_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_cpp_ref")
exception exception_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_shared_cpp_ref")
exception exception_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_shared_cpp_ref")
exception exception_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_shared_cpp_ref")
exception exception_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_shared_cpp_ref")
exception exception_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_shared_cpp_ref")
exception exception_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_shared_cpp_ref")
exception exception_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_shared_cpp_ref")
exception exception_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_shared_cpp_ref")
exception exception_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_shared_cpp_ref")
exception exception_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_shared_cpp_ref")
exception exception_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_shared_cpp_ref")
exception exception_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_shared_cpp_ref")
exception exception_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_shared_cpp_ref")
exception exception_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_shared_cpp_ref")
exception exception_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_shared_cpp_ref")
exception exception_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_shared_cpp_ref")
exception exception_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_shared_cpp_ref")
exception exception_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_shared_cpp_ref")
exception exception_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_shared_cpp_ref")
exception exception_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_shared_cpp_ref")
exception exception_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_shared_cpp_ref")
exception exception_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_shared_cpp_ref")
exception exception_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_shared_cpp_ref")
exception exception_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_shared_cpp_ref")
exception exception_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_shared_cpp_ref")
exception exception_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_shared_cpp_ref")
exception exception_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_shared_cpp_ref")
exception exception_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_shared_cpp_ref")
exception exception_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_shared_cpp_ref")
exception exception_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_shared_cpp_ref")
exception exception_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_shared_cpp_ref")
exception exception_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_shared_cpp_ref")
exception exception_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_shared_cpp_ref")
exception exception_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool")
exception exception_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte")
exception exception_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16")
exception exception_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32")
exception exception_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64")
exception exception_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float")
exception exception_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double")
exception exception_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary")
exception exception_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string")
exception exception_bool_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_custom_default")
exception exception_byte_custom_default {
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_custom_default")
exception exception_i16_custom_default {
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_custom_default")
exception exception_i32_custom_default {
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_custom_default")
exception exception_i64_custom_default {
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_custom_default")
exception exception_float_custom_default {
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_custom_default")
exception exception_double_custom_default {
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_custom_default")
exception exception_binary_custom_default {
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_custom_default")
exception exception_string_custom_default {
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_custom_default")
exception exception_bool_alternative_custom_default {
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool_alternative_custom_default")
exception exception_byte_alternative_custom_default {
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte_alternative_custom_default")
exception exception_i16_alternative_custom_default {
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16_alternative_custom_default")
exception exception_i32_alternative_custom_default {
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32_alternative_custom_default")
exception exception_i64_alternative_custom_default {
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64_alternative_custom_default")
exception exception_float_alternative_custom_default {
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float_alternative_custom_default")
exception exception_double_alternative_custom_default {
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double_alternative_custom_default")
exception exception_binary_alternative_custom_default {
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary_alternative_custom_default")
exception exception_string_alternative_custom_default {
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_alternative_custom_default")
exception exception_optional_list_bool {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool")
exception exception_optional_list_byte {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte")
exception exception_optional_list_i16 {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16")
exception exception_optional_list_i32 {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32")
exception exception_optional_list_i64 {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64")
exception exception_optional_list_float {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float")
exception exception_optional_list_double {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double")
exception exception_optional_list_binary {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary")
exception exception_optional_list_string {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string")
exception exception_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string")
exception exception_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64")
exception exception_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool")
exception exception_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte")
exception exception_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16")
exception exception_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32")
exception exception_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64")
exception exception_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float")
exception exception_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double")
exception exception_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary")
exception exception_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string")
exception exception_optional_map_i64_bool {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool")
exception exception_optional_map_i64_byte {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte")
exception exception_optional_map_i64_i16 {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16")
exception exception_optional_map_i64_i32 {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32")
exception exception_optional_map_i64_i64 {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64")
exception exception_optional_map_i64_float {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float")
exception exception_optional_map_i64_double {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double")
exception exception_optional_map_i64_binary {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary")
exception exception_optional_map_i64_string {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string")
exception exception_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string")
exception exception_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64")
exception exception_optional_map_i64_set_string {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string")
exception exception_optional_map_i64_set_i64 {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64")
exception exception_optional_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_cpp_ref")
exception exception_optional_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_cpp_ref")
exception exception_optional_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_cpp_ref")
exception exception_optional_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_cpp_ref")
exception exception_optional_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_cpp_ref")
exception exception_optional_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_cpp_ref")
exception exception_optional_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_cpp_ref")
exception exception_optional_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_cpp_ref")
exception exception_optional_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_cpp_ref")
exception exception_optional_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_cpp_ref")
exception exception_optional_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_cpp_ref")
exception exception_optional_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_cpp_ref")
exception exception_optional_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_cpp_ref")
exception exception_optional_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_cpp_ref")
exception exception_optional_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_cpp_ref")
exception exception_optional_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_cpp_ref")
exception exception_optional_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_cpp_ref")
exception exception_optional_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_cpp_ref")
exception exception_optional_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_cpp_ref")
exception exception_optional_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_cpp_ref")
exception exception_optional_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_cpp_ref")
exception exception_optional_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_cpp_ref")
exception exception_optional_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_cpp_ref")
exception exception_optional_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_cpp_ref")
exception exception_optional_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_cpp_ref")
exception exception_optional_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_cpp_ref")
exception exception_optional_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_cpp_ref")
exception exception_optional_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_cpp_ref")
exception exception_optional_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_cpp_ref")
exception exception_optional_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_cpp_ref")
exception exception_optional_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_cpp_ref")
exception exception_optional_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_cpp_ref")
exception exception_optional_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_cpp_ref")
exception exception_optional_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_shared_cpp_ref")
exception exception_optional_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_shared_cpp_ref")
exception exception_optional_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_shared_cpp_ref")
exception exception_optional_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_shared_cpp_ref")
exception exception_optional_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_shared_cpp_ref")
exception exception_optional_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_shared_cpp_ref")
exception exception_optional_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_shared_cpp_ref")
exception exception_optional_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_shared_cpp_ref")
exception exception_optional_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_shared_cpp_ref")
exception exception_optional_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_shared_cpp_ref")
exception exception_optional_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_shared_cpp_ref")
exception exception_optional_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_shared_cpp_ref")
exception exception_optional_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_shared_cpp_ref")
exception exception_optional_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_shared_cpp_ref")
exception exception_optional_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_shared_cpp_ref")
exception exception_optional_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_shared_cpp_ref")
exception exception_optional_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_shared_cpp_ref")
exception exception_optional_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_shared_cpp_ref")
exception exception_optional_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_shared_cpp_ref")
exception exception_optional_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_shared_cpp_ref")
exception exception_optional_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_shared_cpp_ref")
exception exception_optional_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_shared_cpp_ref")
exception exception_optional_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_shared_cpp_ref")
exception exception_optional_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_shared_cpp_ref")
exception exception_optional_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_shared_cpp_ref")
exception exception_optional_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_shared_cpp_ref")
exception exception_optional_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_shared_cpp_ref")
exception exception_optional_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_shared_cpp_ref")
exception exception_optional_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_shared_cpp_ref")
exception exception_optional_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_shared_cpp_ref")
exception exception_optional_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_shared_cpp_ref")
exception exception_optional_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_shared_cpp_ref")
exception exception_optional_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_shared_cpp_ref")
exception exception_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool")
exception exception_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte")
exception exception_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16")
exception exception_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32")
exception exception_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64")
exception exception_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float")
exception exception_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double")
exception exception_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary")
exception exception_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string")
exception exception_optional_bool_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_custom_default")
exception exception_optional_byte_custom_default {
  1: optional byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_custom_default")
exception exception_optional_i16_custom_default {
  1: optional i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_custom_default")
exception exception_optional_i32_custom_default {
  1: optional i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_custom_default")
exception exception_optional_i64_custom_default {
  1: optional i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_custom_default")
exception exception_optional_float_custom_default {
  1: optional float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_custom_default")
exception exception_optional_double_custom_default {
  1: optional double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_custom_default")
exception exception_optional_binary_custom_default {
  1: optional binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_custom_default")
exception exception_optional_string_custom_default {
  1: optional string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_custom_default")
exception exception_optional_bool_alternative_custom_default {
  1: optional bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool_alternative_custom_default")
exception exception_optional_byte_alternative_custom_default {
  1: optional byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte_alternative_custom_default")
exception exception_optional_i16_alternative_custom_default {
  1: optional i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16_alternative_custom_default")
exception exception_optional_i32_alternative_custom_default {
  1: optional i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32_alternative_custom_default")
exception exception_optional_i64_alternative_custom_default {
  1: optional i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64_alternative_custom_default")
exception exception_optional_float_alternative_custom_default {
  1: optional float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float_alternative_custom_default")
exception exception_optional_double_alternative_custom_default {
  1: optional double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double_alternative_custom_default")
exception exception_optional_binary_alternative_custom_default {
  1: optional binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary_alternative_custom_default")
exception exception_optional_string_alternative_custom_default {
  1: optional string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string_alternative_custom_default")
exception exception_required_list_bool {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool")
exception exception_required_list_byte {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte")
exception exception_required_list_i16 {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16")
exception exception_required_list_i32 {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32")
exception exception_required_list_i64 {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64")
exception exception_required_list_float {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float")
exception exception_required_list_double {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double")
exception exception_required_list_binary {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary")
exception exception_required_list_string {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string")
exception exception_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string")
exception exception_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64")
exception exception_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool")
exception exception_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte")
exception exception_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16")
exception exception_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32")
exception exception_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64")
exception exception_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float")
exception exception_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double")
exception exception_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary")
exception exception_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string")
exception exception_required_map_i64_bool {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool")
exception exception_required_map_i64_byte {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte")
exception exception_required_map_i64_i16 {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16")
exception exception_required_map_i64_i32 {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32")
exception exception_required_map_i64_i64 {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64")
exception exception_required_map_i64_float {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float")
exception exception_required_map_i64_double {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double")
exception exception_required_map_i64_binary {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary")
exception exception_required_map_i64_string {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string")
exception exception_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string")
exception exception_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64")
exception exception_required_map_i64_set_string {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string")
exception exception_required_map_i64_set_i64 {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64")
exception exception_required_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_cpp_ref")
exception exception_required_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_cpp_ref")
exception exception_required_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_cpp_ref")
exception exception_required_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_cpp_ref")
exception exception_required_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_cpp_ref")
exception exception_required_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_cpp_ref")
exception exception_required_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_cpp_ref")
exception exception_required_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_cpp_ref")
exception exception_required_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_cpp_ref")
exception exception_required_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_cpp_ref")
exception exception_required_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_cpp_ref")
exception exception_required_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_cpp_ref")
exception exception_required_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_cpp_ref")
exception exception_required_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_cpp_ref")
exception exception_required_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_cpp_ref")
exception exception_required_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_cpp_ref")
exception exception_required_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_cpp_ref")
exception exception_required_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_cpp_ref")
exception exception_required_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_cpp_ref")
exception exception_required_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_cpp_ref")
exception exception_required_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_cpp_ref")
exception exception_required_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_cpp_ref")
exception exception_required_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_cpp_ref")
exception exception_required_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_cpp_ref")
exception exception_required_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_cpp_ref")
exception exception_required_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_cpp_ref")
exception exception_required_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_cpp_ref")
exception exception_required_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_cpp_ref")
exception exception_required_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_cpp_ref")
exception exception_required_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_cpp_ref")
exception exception_required_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_cpp_ref")
exception exception_required_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_cpp_ref")
exception exception_required_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_cpp_ref")
exception exception_required_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_shared_cpp_ref")
exception exception_required_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_shared_cpp_ref")
exception exception_required_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_shared_cpp_ref")
exception exception_required_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_shared_cpp_ref")
exception exception_required_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_shared_cpp_ref")
exception exception_required_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_shared_cpp_ref")
exception exception_required_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_shared_cpp_ref")
exception exception_required_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_shared_cpp_ref")
exception exception_required_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_shared_cpp_ref")
exception exception_required_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_shared_cpp_ref")
exception exception_required_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_shared_cpp_ref")
exception exception_required_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_shared_cpp_ref")
exception exception_required_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_shared_cpp_ref")
exception exception_required_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_shared_cpp_ref")
exception exception_required_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_shared_cpp_ref")
exception exception_required_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_shared_cpp_ref")
exception exception_required_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_shared_cpp_ref")
exception exception_required_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_shared_cpp_ref")
exception exception_required_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_shared_cpp_ref")
exception exception_required_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_shared_cpp_ref")
exception exception_required_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_shared_cpp_ref")
exception exception_required_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_shared_cpp_ref")
exception exception_required_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_shared_cpp_ref")
exception exception_required_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_shared_cpp_ref")
exception exception_required_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_shared_cpp_ref")
exception exception_required_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_shared_cpp_ref")
exception exception_required_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_shared_cpp_ref")
exception exception_required_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_shared_cpp_ref")
exception exception_required_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_shared_cpp_ref")
exception exception_required_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_shared_cpp_ref")
exception exception_required_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_shared_cpp_ref")
exception exception_required_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_shared_cpp_ref")
exception exception_required_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_shared_cpp_ref")
exception exception_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool")
exception exception_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte")
exception exception_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16")
exception exception_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32")
exception exception_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64")
exception exception_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float")
exception exception_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double")
exception exception_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary")
exception exception_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string")
exception exception_required_bool_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_custom_default")
exception exception_required_byte_custom_default {
  1: required byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_custom_default")
exception exception_required_i16_custom_default {
  1: required i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_custom_default")
exception exception_required_i32_custom_default {
  1: required i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_custom_default")
exception exception_required_i64_custom_default {
  1: required i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_custom_default")
exception exception_required_float_custom_default {
  1: required float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_custom_default")
exception exception_required_double_custom_default {
  1: required double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_custom_default")
exception exception_required_binary_custom_default {
  1: required binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_custom_default")
exception exception_required_string_custom_default {
  1: required string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_custom_default")
exception exception_required_bool_alternative_custom_default {
  1: required bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool_alternative_custom_default")
exception exception_required_byte_alternative_custom_default {
  1: required byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte_alternative_custom_default")
exception exception_required_i16_alternative_custom_default {
  1: required i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16_alternative_custom_default")
exception exception_required_i32_alternative_custom_default {
  1: required i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32_alternative_custom_default")
exception exception_required_i64_alternative_custom_default {
  1: required i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64_alternative_custom_default")
exception exception_required_float_alternative_custom_default {
  1: required float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float_alternative_custom_default")
exception exception_required_double_alternative_custom_default {
  1: required double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double_alternative_custom_default")
exception exception_required_binary_alternative_custom_default {
  1: required binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary_alternative_custom_default")
exception exception_required_string_alternative_custom_default {
  1: required string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string_alternative_custom_default")
exception exception_terse_list_bool {
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool")
exception exception_terse_list_byte {
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte")
exception exception_terse_list_i16 {
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16")
exception exception_terse_list_i32 {
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32")
exception exception_terse_list_i64 {
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64")
exception exception_terse_list_float {
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float")
exception exception_terse_list_double {
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double")
exception exception_terse_list_binary {
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary")
exception exception_terse_list_string {
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string")
exception exception_terse_set_string {
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string")
exception exception_terse_set_i64 {
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64")
exception exception_terse_map_string_bool {
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool")
exception exception_terse_map_string_byte {
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte")
exception exception_terse_map_string_i16 {
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16")
exception exception_terse_map_string_i32 {
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32")
exception exception_terse_map_string_i64 {
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64")
exception exception_terse_map_string_float {
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float")
exception exception_terse_map_string_double {
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double")
exception exception_terse_map_string_binary {
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary")
exception exception_terse_map_string_string {
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string")
exception exception_terse_map_i64_bool {
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool")
exception exception_terse_map_i64_byte {
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte")
exception exception_terse_map_i64_i16 {
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16")
exception exception_terse_map_i64_i32 {
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32")
exception exception_terse_map_i64_i64 {
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64")
exception exception_terse_map_i64_float {
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float")
exception exception_terse_map_i64_double {
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double")
exception exception_terse_map_i64_binary {
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary")
exception exception_terse_map_i64_string {
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string")
exception exception_terse_map_string_set_string {
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string")
exception exception_terse_map_string_set_i64 {
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64")
exception exception_terse_map_i64_set_string {
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string")
exception exception_terse_map_i64_set_i64 {
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64")
exception exception_terse_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool_cpp_ref")
exception exception_terse_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte_cpp_ref")
exception exception_terse_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16_cpp_ref")
exception exception_terse_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32_cpp_ref")
exception exception_terse_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64_cpp_ref")
exception exception_terse_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float_cpp_ref")
exception exception_terse_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double_cpp_ref")
exception exception_terse_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary_cpp_ref")
exception exception_terse_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string_cpp_ref")
exception exception_terse_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string_cpp_ref")
exception exception_terse_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64_cpp_ref")
exception exception_terse_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool_cpp_ref")
exception exception_terse_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte_cpp_ref")
exception exception_terse_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16_cpp_ref")
exception exception_terse_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32_cpp_ref")
exception exception_terse_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64_cpp_ref")
exception exception_terse_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float_cpp_ref")
exception exception_terse_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double_cpp_ref")
exception exception_terse_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary_cpp_ref")
exception exception_terse_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string_cpp_ref")
exception exception_terse_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool_cpp_ref")
exception exception_terse_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte_cpp_ref")
exception exception_terse_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16_cpp_ref")
exception exception_terse_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32_cpp_ref")
exception exception_terse_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64_cpp_ref")
exception exception_terse_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float_cpp_ref")
exception exception_terse_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double_cpp_ref")
exception exception_terse_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary_cpp_ref")
exception exception_terse_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string_cpp_ref")
exception exception_terse_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string_cpp_ref")
exception exception_terse_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64_cpp_ref")
exception exception_terse_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string_cpp_ref")
exception exception_terse_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64_cpp_ref")
exception exception_terse_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_bool_shared_cpp_ref")
exception exception_terse_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_byte_shared_cpp_ref")
exception exception_terse_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i16_shared_cpp_ref")
exception exception_terse_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i32_shared_cpp_ref")
exception exception_terse_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_i64_shared_cpp_ref")
exception exception_terse_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_float_shared_cpp_ref")
exception exception_terse_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_double_shared_cpp_ref")
exception exception_terse_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_binary_shared_cpp_ref")
exception exception_terse_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_list_string_shared_cpp_ref")
exception exception_terse_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_string_shared_cpp_ref")
exception exception_terse_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_set_i64_shared_cpp_ref")
exception exception_terse_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_bool_shared_cpp_ref")
exception exception_terse_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_byte_shared_cpp_ref")
exception exception_terse_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i16_shared_cpp_ref")
exception exception_terse_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i32_shared_cpp_ref")
exception exception_terse_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_i64_shared_cpp_ref")
exception exception_terse_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_float_shared_cpp_ref")
exception exception_terse_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_double_shared_cpp_ref")
exception exception_terse_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_binary_shared_cpp_ref")
exception exception_terse_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_string_shared_cpp_ref")
exception exception_terse_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_bool_shared_cpp_ref")
exception exception_terse_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_byte_shared_cpp_ref")
exception exception_terse_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i16_shared_cpp_ref")
exception exception_terse_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i32_shared_cpp_ref")
exception exception_terse_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_i64_shared_cpp_ref")
exception exception_terse_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_float_shared_cpp_ref")
exception exception_terse_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_double_shared_cpp_ref")
exception exception_terse_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_binary_shared_cpp_ref")
exception exception_terse_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_string_shared_cpp_ref")
exception exception_terse_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_string_shared_cpp_ref")
exception exception_terse_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_string_set_i64_shared_cpp_ref")
exception exception_terse_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_string_shared_cpp_ref")
exception exception_terse_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  @thrift.TerseWrite
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_map_i64_set_i64_shared_cpp_ref")
exception exception_terse_bool {
  @thrift.TerseWrite
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool")
exception exception_terse_byte {
  @thrift.TerseWrite
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte")
exception exception_terse_i16 {
  @thrift.TerseWrite
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16")
exception exception_terse_i32 {
  @thrift.TerseWrite
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32")
exception exception_terse_i64 {
  @thrift.TerseWrite
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64")
exception exception_terse_float {
  @thrift.TerseWrite
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float")
exception exception_terse_double {
  @thrift.TerseWrite
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double")
exception exception_terse_binary {
  @thrift.TerseWrite
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary")
exception exception_terse_string {
  @thrift.TerseWrite
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string")
exception exception_terse_bool_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool_custom_default")
exception exception_terse_byte_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte_custom_default")
exception exception_terse_i16_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 2;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16_custom_default")
exception exception_terse_i32_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 3;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32_custom_default")
exception exception_terse_i64_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 4;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64_custom_default")
exception exception_terse_float_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 5;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float_custom_default")
exception exception_terse_double_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 6;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double_custom_default")
exception exception_terse_binary_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "7";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary_custom_default")
exception exception_terse_string_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "8";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string_custom_default")
exception exception_terse_bool_alternative_custom_default {
  @thrift.TerseWrite
  1: bool field_1 = true;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_bool_alternative_custom_default")
exception exception_terse_byte_alternative_custom_default {
  @thrift.TerseWrite
  1: byte field_1 = 10;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_byte_alternative_custom_default")
exception exception_terse_i16_alternative_custom_default {
  @thrift.TerseWrite
  1: i16 field_1 = 20;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i16_alternative_custom_default")
exception exception_terse_i32_alternative_custom_default {
  @thrift.TerseWrite
  1: i32 field_1 = 30;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i32_alternative_custom_default")
exception exception_terse_i64_alternative_custom_default {
  @thrift.TerseWrite
  1: i64 field_1 = 40;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_i64_alternative_custom_default")
exception exception_terse_float_alternative_custom_default {
  @thrift.TerseWrite
  1: float field_1 = 50;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_float_alternative_custom_default")
exception exception_terse_double_alternative_custom_default {
  @thrift.TerseWrite
  1: double field_1 = 60;
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_double_alternative_custom_default")
exception exception_terse_binary_alternative_custom_default {
  @thrift.TerseWrite
  1: binary field_1 = "70";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_binary_alternative_custom_default")
exception exception_terse_string_alternative_custom_default {
  @thrift.TerseWrite
  1: string field_1 = "80";
} (thrift.uri="facebook.com/thrift/test/testset/exception_terse_string_alternative_custom_default")
exception exception_optional_list_bool_box {
  @thrift.Box
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_box")
exception exception_optional_list_byte_box {
  @thrift.Box
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_box")
exception exception_optional_list_i16_box {
  @thrift.Box
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_box")
exception exception_optional_list_i32_box {
  @thrift.Box
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_box")
exception exception_optional_list_i64_box {
  @thrift.Box
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_box")
exception exception_optional_list_float_box {
  @thrift.Box
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_box")
exception exception_optional_list_double_box {
  @thrift.Box
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_box")
exception exception_optional_list_binary_box {
  @thrift.Box
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_box")
exception exception_optional_list_string_box {
  @thrift.Box
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_box")
exception exception_optional_set_string_box {
  @thrift.Box
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_box")
exception exception_optional_set_i64_box {
  @thrift.Box
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_box")
exception exception_optional_map_string_bool_box {
  @thrift.Box
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_box")
exception exception_optional_map_string_byte_box {
  @thrift.Box
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_box")
exception exception_optional_map_string_i16_box {
  @thrift.Box
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_box")
exception exception_optional_map_string_i32_box {
  @thrift.Box
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_box")
exception exception_optional_map_string_i64_box {
  @thrift.Box
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_box")
exception exception_optional_map_string_float_box {
  @thrift.Box
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_box")
exception exception_optional_map_string_double_box {
  @thrift.Box
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_box")
exception exception_optional_map_string_binary_box {
  @thrift.Box
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_box")
exception exception_optional_map_string_string_box {
  @thrift.Box
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_box")
exception exception_optional_map_i64_bool_box {
  @thrift.Box
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_box")
exception exception_optional_map_i64_byte_box {
  @thrift.Box
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_box")
exception exception_optional_map_i64_i16_box {
  @thrift.Box
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_box")
exception exception_optional_map_i64_i32_box {
  @thrift.Box
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_box")
exception exception_optional_map_i64_i64_box {
  @thrift.Box
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_box")
exception exception_optional_map_i64_float_box {
  @thrift.Box
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_box")
exception exception_optional_map_i64_double_box {
  @thrift.Box
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_box")
exception exception_optional_map_i64_binary_box {
  @thrift.Box
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_box")
exception exception_optional_map_i64_string_box {
  @thrift.Box
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_box")
exception exception_optional_map_string_set_string_box {
  @thrift.Box
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_box")
exception exception_optional_map_string_set_i64_box {
  @thrift.Box
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_box")
exception exception_optional_map_i64_set_string_box {
  @thrift.Box
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_box")
exception exception_optional_map_i64_set_i64_box {
  @thrift.Box
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_box")
exception exception_list_bool_lazy {
  @cpp.Lazy
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_lazy")
exception exception_list_byte_lazy {
  @cpp.Lazy
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_lazy")
exception exception_list_i16_lazy {
  @cpp.Lazy
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_lazy")
exception exception_list_i32_lazy {
  @cpp.Lazy
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_lazy")
exception exception_list_i64_lazy {
  @cpp.Lazy
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_lazy")
exception exception_list_float_lazy {
  @cpp.Lazy
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_lazy")
exception exception_list_double_lazy {
  @cpp.Lazy
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_lazy")
exception exception_list_binary_lazy {
  @cpp.Lazy
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_lazy")
exception exception_list_string_lazy {
  @cpp.Lazy
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_lazy")
exception exception_set_string_lazy {
  @cpp.Lazy
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_lazy")
exception exception_set_i64_lazy {
  @cpp.Lazy
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_lazy")
exception exception_map_string_bool_lazy {
  @cpp.Lazy
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_lazy")
exception exception_map_string_byte_lazy {
  @cpp.Lazy
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_lazy")
exception exception_map_string_i16_lazy {
  @cpp.Lazy
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_lazy")
exception exception_map_string_i32_lazy {
  @cpp.Lazy
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_lazy")
exception exception_map_string_i64_lazy {
  @cpp.Lazy
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_lazy")
exception exception_map_string_float_lazy {
  @cpp.Lazy
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_lazy")
exception exception_map_string_double_lazy {
  @cpp.Lazy
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_lazy")
exception exception_map_string_binary_lazy {
  @cpp.Lazy
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_lazy")
exception exception_map_string_string_lazy {
  @cpp.Lazy
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_lazy")
exception exception_map_i64_bool_lazy {
  @cpp.Lazy
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_lazy")
exception exception_map_i64_byte_lazy {
  @cpp.Lazy
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_lazy")
exception exception_map_i64_i16_lazy {
  @cpp.Lazy
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_lazy")
exception exception_map_i64_i32_lazy {
  @cpp.Lazy
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_lazy")
exception exception_map_i64_i64_lazy {
  @cpp.Lazy
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_lazy")
exception exception_map_i64_float_lazy {
  @cpp.Lazy
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_lazy")
exception exception_map_i64_double_lazy {
  @cpp.Lazy
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_lazy")
exception exception_map_i64_binary_lazy {
  @cpp.Lazy
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_lazy")
exception exception_map_i64_string_lazy {
  @cpp.Lazy
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_lazy")
exception exception_map_string_set_string_lazy {
  @cpp.Lazy
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_lazy")
exception exception_map_string_set_i64_lazy {
  @cpp.Lazy
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_lazy")
exception exception_map_i64_set_string_lazy {
  @cpp.Lazy
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_lazy")
exception exception_map_i64_set_i64_lazy {
  @cpp.Lazy
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_lazy")
exception exception_string_lazy {
  @cpp.Lazy
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_lazy")
union union_empty {
} (thrift.uri="facebook.com/thrift/test/testset/union_empty")
union union_list_bool {
  1: list<bool> field_1;
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool")
union union_list_byte {
  1: list<byte> field_1;
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte")
union union_list_i16 {
  1: list<i16> field_1;
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16")
union union_list_i32 {
  1: list<i32> field_1;
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32")
union union_list_i64 {
  1: list<i64> field_1;
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64")
union union_list_float {
  1: list<float> field_1;
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float")
union union_list_double {
  1: list<double> field_1;
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double")
union union_list_binary {
  1: list<binary> field_1;
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary")
union union_list_string {
  1: list<string> field_1;
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string")
union union_set_string {
  1: set<string> field_1;
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string")
union union_set_i64 {
  1: set<i64> field_1;
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64")
union union_map_string_bool {
  1: map<string, bool> field_1;
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool")
union union_map_string_byte {
  1: map<string, byte> field_1;
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte")
union union_map_string_i16 {
  1: map<string, i16> field_1;
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16")
union union_map_string_i32 {
  1: map<string, i32> field_1;
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32")
union union_map_string_i64 {
  1: map<string, i64> field_1;
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64")
union union_map_string_float {
  1: map<string, float> field_1;
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float")
union union_map_string_double {
  1: map<string, double> field_1;
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double")
union union_map_string_binary {
  1: map<string, binary> field_1;
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary")
union union_map_string_string {
  1: map<string, string> field_1;
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string")
union union_map_i64_bool {
  1: map<i64, bool> field_1;
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool")
union union_map_i64_byte {
  1: map<i64, byte> field_1;
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte")
union union_map_i64_i16 {
  1: map<i64, i16> field_1;
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16")
union union_map_i64_i32 {
  1: map<i64, i32> field_1;
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32")
union union_map_i64_i64 {
  1: map<i64, i64> field_1;
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64")
union union_map_i64_float {
  1: map<i64, float> field_1;
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float")
union union_map_i64_double {
  1: map<i64, double> field_1;
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double")
union union_map_i64_binary {
  1: map<i64, binary> field_1;
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary")
union union_map_i64_string {
  1: map<i64, string> field_1;
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string")
union union_map_string_set_string {
  1: map<string, set<string>> field_1;
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string")
union union_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64")
union union_map_i64_set_string {
  1: map<i64, set<string>> field_1;
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string")
union union_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64")
union union_list_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_cpp_ref")
union union_list_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_cpp_ref")
union union_list_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_cpp_ref")
union union_list_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_cpp_ref")
union union_list_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_cpp_ref")
union union_list_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_cpp_ref")
union union_list_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_cpp_ref")
union union_list_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_cpp_ref")
union union_list_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: list<string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_cpp_ref")
union union_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_cpp_ref")
union union_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: set<i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_cpp_ref")
union union_map_string_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_cpp_ref")
union union_map_string_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_cpp_ref")
union union_map_string_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_cpp_ref")
union union_map_string_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_cpp_ref")
union union_map_string_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_cpp_ref")
union union_map_string_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_cpp_ref")
union union_map_string_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_cpp_ref")
union union_map_string_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_cpp_ref")
union union_map_string_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_cpp_ref")
union union_map_i64_bool_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, bool> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_cpp_ref")
union union_map_i64_byte_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, byte> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_cpp_ref")
union union_map_i64_i16_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i16> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_cpp_ref")
union union_map_i64_i32_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i32> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_cpp_ref")
union union_map_i64_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, i64> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_cpp_ref")
union union_map_i64_float_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, float> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_cpp_ref")
union union_map_i64_double_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, double> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_cpp_ref")
union union_map_i64_binary_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, binary> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_cpp_ref")
union union_map_i64_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, string> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_cpp_ref")
union union_map_string_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_cpp_ref")
union union_map_string_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<string, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_cpp_ref")
union union_map_i64_set_string_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_cpp_ref")
union union_map_i64_set_i64_cpp_ref {
  @cpp.Ref{type = cpp.RefType.Unique}
  1: map<i64, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.Unique}
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_cpp_ref")
union union_list_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_shared_cpp_ref")
union union_list_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_shared_cpp_ref")
union union_list_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_shared_cpp_ref")
union union_list_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_shared_cpp_ref")
union union_list_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_shared_cpp_ref")
union union_list_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_shared_cpp_ref")
union union_list_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_shared_cpp_ref")
union union_list_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_shared_cpp_ref")
union union_list_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: list<string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_shared_cpp_ref")
union union_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_shared_cpp_ref")
union union_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: set<i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_shared_cpp_ref")
union union_map_string_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_shared_cpp_ref")
union union_map_string_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_shared_cpp_ref")
union union_map_string_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_shared_cpp_ref")
union union_map_string_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_shared_cpp_ref")
union union_map_string_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_shared_cpp_ref")
union union_map_string_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_shared_cpp_ref")
union union_map_string_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_shared_cpp_ref")
union union_map_string_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_shared_cpp_ref")
union union_map_string_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_shared_cpp_ref")
union union_map_i64_bool_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, bool> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_shared_cpp_ref")
union union_map_i64_byte_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, byte> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_shared_cpp_ref")
union union_map_i64_i16_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i16> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_shared_cpp_ref")
union union_map_i64_i32_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i32> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_shared_cpp_ref")
union union_map_i64_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, i64> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_shared_cpp_ref")
union union_map_i64_float_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, float> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_shared_cpp_ref")
union union_map_i64_double_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, double> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_shared_cpp_ref")
union union_map_i64_binary_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, binary> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_shared_cpp_ref")
union union_map_i64_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, string> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_shared_cpp_ref")
union union_map_string_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_shared_cpp_ref")
union union_map_string_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<string, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_shared_cpp_ref")
union union_map_i64_set_string_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<string>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_shared_cpp_ref")
union union_map_i64_set_i64_shared_cpp_ref {
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  1: map<i64, set<i64>> field_1;
  @cpp.Ref{type = cpp.RefType.SharedMutable}
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_shared_cpp_ref")
union union_bool {
  1: bool field_1;
  2: bool field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_bool")
union union_byte {
  1: byte field_1;
  2: byte field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_byte")
union union_i16 {
  1: i16 field_1;
  2: i16 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i16")
union union_i32 {
  1: i32 field_1;
  2: i32 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i32")
union union_i64 {
  1: i64 field_1;
  2: i64 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i64")
union union_float {
  1: float field_1;
  2: float field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_float")
union union_double {
  1: double field_1;
  2: double field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_double")
union union_binary {
  1: binary field_1;
  2: binary field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_binary")
union union_string {
  1: string field_1;
  2: string field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_string")
struct struct_all {
  1: struct_empty field_1;
  2: struct_list_bool field_2;
  3: struct_list_byte field_3;
  4: struct_list_i16 field_4;
  5: struct_list_i32 field_5;
  6: struct_list_i64 field_6;
  7: struct_list_float field_7;
  8: struct_list_double field_8;
  9: struct_list_binary field_9;
  10: struct_list_string field_10;
  11: struct_set_string field_11;
  12: struct_set_i64 field_12;
  13: struct_map_string_bool field_13;
  14: struct_map_string_byte field_14;
  15: struct_map_string_i16 field_15;
  16: struct_map_string_i32 field_16;
  17: struct_map_string_i64 field_17;
  18: struct_map_string_float field_18;
  19: struct_map_string_double field_19;
  20: struct_map_string_binary field_20;
  21: struct_map_string_string field_21;
  22: struct_map_i64_bool field_22;
  23: struct_map_i64_byte field_23;
  24: struct_map_i64_i16 field_24;
  25: struct_map_i64_i32 field_25;
  26: struct_map_i64_i64 field_26;
  27: struct_map_i64_float field_27;
  28: struct_map_i64_double field_28;
  29: struct_map_i64_binary field_29;
  30: struct_map_i64_string field_30;
  31: struct_map_string_set_string field_31;
  32: struct_map_string_set_i64 field_32;
  33: struct_map_i64_set_string field_33;
  34: struct_map_i64_set_i64 field_34;
  35: struct_list_bool_cpp_ref field_35;
  36: struct_list_byte_cpp_ref field_36;
  37: struct_list_i16_cpp_ref field_37;
  38: struct_list_i32_cpp_ref field_38;
  39: struct_list_i64_cpp_ref field_39;
  40: struct_list_float_cpp_ref field_40;
  41: struct_list_double_cpp_ref field_41;
  42: struct_list_binary_cpp_ref field_42;
  43: struct_list_string_cpp_ref field_43;
  44: struct_set_string_cpp_ref field_44;
  45: struct_set_i64_cpp_ref field_45;
  46: struct_map_string_bool_cpp_ref field_46;
  47: struct_map_string_byte_cpp_ref field_47;
  48: struct_map_string_i16_cpp_ref field_48;
  49: struct_map_string_i32_cpp_ref field_49;
  50: struct_map_string_i64_cpp_ref field_50;
  51: struct_map_string_float_cpp_ref field_51;
  52: struct_map_string_double_cpp_ref field_52;
  53: struct_map_string_binary_cpp_ref field_53;
  54: struct_map_string_string_cpp_ref field_54;
  55: struct_map_i64_bool_cpp_ref field_55;
  56: struct_map_i64_byte_cpp_ref field_56;
  57: struct_map_i64_i16_cpp_ref field_57;
  58: struct_map_i64_i32_cpp_ref field_58;
  59: struct_map_i64_i64_cpp_ref field_59;
  60: struct_map_i64_float_cpp_ref field_60;
  61: struct_map_i64_double_cpp_ref field_61;
  62: struct_map_i64_binary_cpp_ref field_62;
  63: struct_map_i64_string_cpp_ref field_63;
  64: struct_map_string_set_string_cpp_ref field_64;
  65: struct_map_string_set_i64_cpp_ref field_65;
  66: struct_map_i64_set_string_cpp_ref field_66;
  67: struct_map_i64_set_i64_cpp_ref field_67;
  68: struct_list_bool_shared_cpp_ref field_68;
  69: struct_list_byte_shared_cpp_ref field_69;
  70: struct_list_i16_shared_cpp_ref field_70;
  71: struct_list_i32_shared_cpp_ref field_71;
  72: struct_list_i64_shared_cpp_ref field_72;
  73: struct_list_float_shared_cpp_ref field_73;
  74: struct_list_double_shared_cpp_ref field_74;
  75: struct_list_binary_shared_cpp_ref field_75;
  76: struct_list_string_shared_cpp_ref field_76;
  77: struct_set_string_shared_cpp_ref field_77;
  78: struct_set_i64_shared_cpp_ref field_78;
  79: struct_map_string_bool_shared_cpp_ref field_79;
  80: struct_map_string_byte_shared_cpp_ref field_80;
  81: struct_map_string_i16_shared_cpp_ref field_81;
  82: struct_map_string_i32_shared_cpp_ref field_82;
  83: struct_map_string_i64_shared_cpp_ref field_83;
  84: struct_map_string_float_shared_cpp_ref field_84;
  85: struct_map_string_double_shared_cpp_ref field_85;
  86: struct_map_string_binary_shared_cpp_ref field_86;
  87: struct_map_string_string_shared_cpp_ref field_87;
  88: struct_map_i64_bool_shared_cpp_ref field_88;
  89: struct_map_i64_byte_shared_cpp_ref field_89;
  90: struct_map_i64_i16_shared_cpp_ref field_90;
  91: struct_map_i64_i32_shared_cpp_ref field_91;
  92: struct_map_i64_i64_shared_cpp_ref field_92;
  93: struct_map_i64_float_shared_cpp_ref field_93;
  94: struct_map_i64_double_shared_cpp_ref field_94;
  95: struct_map_i64_binary_shared_cpp_ref field_95;
  96: struct_map_i64_string_shared_cpp_ref field_96;
  97: struct_map_string_set_string_shared_cpp_ref field_97;
  98: struct_map_string_set_i64_shared_cpp_ref field_98;
  99: struct_map_i64_set_string_shared_cpp_ref field_99;
  100: struct_map_i64_set_i64_shared_cpp_ref field_100;
  101: struct_bool field_101;
  102: struct_byte field_102;
  103: struct_i16 field_103;
  104: struct_i32 field_104;
  105: struct_i64 field_105;
  106: struct_float field_106;
  107: struct_double field_107;
  108: struct_binary field_108;
  109: struct_string field_109;
  110: struct_bool_custom_default field_110;
  111: struct_byte_custom_default field_111;
  112: struct_i16_custom_default field_112;
  113: struct_i32_custom_default field_113;
  114: struct_i64_custom_default field_114;
  115: struct_float_custom_default field_115;
  116: struct_double_custom_default field_116;
  117: struct_binary_custom_default field_117;
  118: struct_string_custom_default field_118;
  119: struct_bool_alternative_custom_default field_119;
  120: struct_byte_alternative_custom_default field_120;
  121: struct_i16_alternative_custom_default field_121;
  122: struct_i32_alternative_custom_default field_122;
  123: struct_i64_alternative_custom_default field_123;
  124: struct_float_alternative_custom_default field_124;
  125: struct_double_alternative_custom_default field_125;
  126: struct_binary_alternative_custom_default field_126;
  127: struct_string_alternative_custom_default field_127;
  128: struct_optional_list_bool field_128;
  129: struct_optional_list_byte field_129;
  130: struct_optional_list_i16 field_130;
  131: struct_optional_list_i32 field_131;
  132: struct_optional_list_i64 field_132;
  133: struct_optional_list_float field_133;
  134: struct_optional_list_double field_134;
  135: struct_optional_list_binary field_135;
  136: struct_optional_list_string field_136;
  137: struct_optional_set_string field_137;
  138: struct_optional_set_i64 field_138;
  139: struct_optional_map_string_bool field_139;
  140: struct_optional_map_string_byte field_140;
  141: struct_optional_map_string_i16 field_141;
  142: struct_optional_map_string_i32 field_142;
  143: struct_optional_map_string_i64 field_143;
  144: struct_optional_map_string_float field_144;
  145: struct_optional_map_string_double field_145;
  146: struct_optional_map_string_binary field_146;
  147: struct_optional_map_string_string field_147;
  148: struct_optional_map_i64_bool field_148;
  149: struct_optional_map_i64_byte field_149;
  150: struct_optional_map_i64_i16 field_150;
  151: struct_optional_map_i64_i32 field_151;
  152: struct_optional_map_i64_i64 field_152;
  153: struct_optional_map_i64_float field_153;
  154: struct_optional_map_i64_double field_154;
  155: struct_optional_map_i64_binary field_155;
  156: struct_optional_map_i64_string field_156;
  157: struct_optional_map_string_set_string field_157;
  158: struct_optional_map_string_set_i64 field_158;
  159: struct_optional_map_i64_set_string field_159;
  160: struct_optional_map_i64_set_i64 field_160;
  161: struct_optional_list_bool_cpp_ref field_161;
  162: struct_optional_list_byte_cpp_ref field_162;
  163: struct_optional_list_i16_cpp_ref field_163;
  164: struct_optional_list_i32_cpp_ref field_164;
  165: struct_optional_list_i64_cpp_ref field_165;
  166: struct_optional_list_float_cpp_ref field_166;
  167: struct_optional_list_double_cpp_ref field_167;
  168: struct_optional_list_binary_cpp_ref field_168;
  169: struct_optional_list_string_cpp_ref field_169;
  170: struct_optional_set_string_cpp_ref field_170;
  171: struct_optional_set_i64_cpp_ref field_171;
  172: struct_optional_map_string_bool_cpp_ref field_172;
  173: struct_optional_map_string_byte_cpp_ref field_173;
  174: struct_optional_map_string_i16_cpp_ref field_174;
  175: struct_optional_map_string_i32_cpp_ref field_175;
  176: struct_optional_map_string_i64_cpp_ref field_176;
  177: struct_optional_map_string_float_cpp_ref field_177;
  178: struct_optional_map_string_double_cpp_ref field_178;
  179: struct_optional_map_string_binary_cpp_ref field_179;
  180: struct_optional_map_string_string_cpp_ref field_180;
  181: struct_optional_map_i64_bool_cpp_ref field_181;
  182: struct_optional_map_i64_byte_cpp_ref field_182;
  183: struct_optional_map_i64_i16_cpp_ref field_183;
  184: struct_optional_map_i64_i32_cpp_ref field_184;
  185: struct_optional_map_i64_i64_cpp_ref field_185;
  186: struct_optional_map_i64_float_cpp_ref field_186;
  187: struct_optional_map_i64_double_cpp_ref field_187;
  188: struct_optional_map_i64_binary_cpp_ref field_188;
  189: struct_optional_map_i64_string_cpp_ref field_189;
  190: struct_optional_map_string_set_string_cpp_ref field_190;
  191: struct_optional_map_string_set_i64_cpp_ref field_191;
  192: struct_optional_map_i64_set_string_cpp_ref field_192;
  193: struct_optional_map_i64_set_i64_cpp_ref field_193;
  194: struct_optional_list_bool_shared_cpp_ref field_194;
  195: struct_optional_list_byte_shared_cpp_ref field_195;
  196: struct_optional_list_i16_shared_cpp_ref field_196;
  197: struct_optional_list_i32_shared_cpp_ref field_197;
  198: struct_optional_list_i64_shared_cpp_ref field_198;
  199: struct_optional_list_float_shared_cpp_ref field_199;
  200: struct_optional_list_double_shared_cpp_ref field_200;
  201: struct_optional_list_binary_shared_cpp_ref field_201;
  202: struct_optional_list_string_shared_cpp_ref field_202;
  203: struct_optional_set_string_shared_cpp_ref field_203;
  204: struct_optional_set_i64_shared_cpp_ref field_204;
  205: struct_optional_map_string_bool_shared_cpp_ref field_205;
  206: struct_optional_map_string_byte_shared_cpp_ref field_206;
  207: struct_optional_map_string_i16_shared_cpp_ref field_207;
  208: struct_optional_map_string_i32_shared_cpp_ref field_208;
  209: struct_optional_map_string_i64_shared_cpp_ref field_209;
  210: struct_optional_map_string_float_shared_cpp_ref field_210;
  211: struct_optional_map_string_double_shared_cpp_ref field_211;
  212: struct_optional_map_string_binary_shared_cpp_ref field_212;
  213: struct_optional_map_string_string_shared_cpp_ref field_213;
  214: struct_optional_map_i64_bool_shared_cpp_ref field_214;
  215: struct_optional_map_i64_byte_shared_cpp_ref field_215;
  216: struct_optional_map_i64_i16_shared_cpp_ref field_216;
  217: struct_optional_map_i64_i32_shared_cpp_ref field_217;
  218: struct_optional_map_i64_i64_shared_cpp_ref field_218;
  219: struct_optional_map_i64_float_shared_cpp_ref field_219;
  220: struct_optional_map_i64_double_shared_cpp_ref field_220;
  221: struct_optional_map_i64_binary_shared_cpp_ref field_221;
  222: struct_optional_map_i64_string_shared_cpp_ref field_222;
  223: struct_optional_map_string_set_string_shared_cpp_ref field_223;
  224: struct_optional_map_string_set_i64_shared_cpp_ref field_224;
  225: struct_optional_map_i64_set_string_shared_cpp_ref field_225;
  226: struct_optional_map_i64_set_i64_shared_cpp_ref field_226;
  227: struct_optional_bool field_227;
  228: struct_optional_byte field_228;
  229: struct_optional_i16 field_229;
  230: struct_optional_i32 field_230;
  231: struct_optional_i64 field_231;
  232: struct_optional_float field_232;
  233: struct_optional_double field_233;
  234: struct_optional_binary field_234;
  235: struct_optional_string field_235;
  236: struct_optional_bool_custom_default field_236;
  237: struct_optional_byte_custom_default field_237;
  238: struct_optional_i16_custom_default field_238;
  239: struct_optional_i32_custom_default field_239;
  240: struct_optional_i64_custom_default field_240;
  241: struct_optional_float_custom_default field_241;
  242: struct_optional_double_custom_default field_242;
  243: struct_optional_binary_custom_default field_243;
  244: struct_optional_string_custom_default field_244;
  245: struct_optional_bool_alternative_custom_default field_245;
  246: struct_optional_byte_alternative_custom_default field_246;
  247: struct_optional_i16_alternative_custom_default field_247;
  248: struct_optional_i32_alternative_custom_default field_248;
  249: struct_optional_i64_alternative_custom_default field_249;
  250: struct_optional_float_alternative_custom_default field_250;
  251: struct_optional_double_alternative_custom_default field_251;
  252: struct_optional_binary_alternative_custom_default field_252;
  253: struct_optional_string_alternative_custom_default field_253;
  254: struct_required_list_bool field_254;
  255: struct_required_list_byte field_255;
  256: struct_required_list_i16 field_256;
  257: struct_required_list_i32 field_257;
  258: struct_required_list_i64 field_258;
  259: struct_required_list_float field_259;
  260: struct_required_list_double field_260;
  261: struct_required_list_binary field_261;
  262: struct_required_list_string field_262;
  263: struct_required_set_string field_263;
  264: struct_required_set_i64 field_264;
  265: struct_required_map_string_bool field_265;
  266: struct_required_map_string_byte field_266;
  267: struct_required_map_string_i16 field_267;
  268: struct_required_map_string_i32 field_268;
  269: struct_required_map_string_i64 field_269;
  270: struct_required_map_string_float field_270;
  271: struct_required_map_string_double field_271;
  272: struct_required_map_string_binary field_272;
  273: struct_required_map_string_string field_273;
  274: struct_required_map_i64_bool field_274;
  275: struct_required_map_i64_byte field_275;
  276: struct_required_map_i64_i16 field_276;
  277: struct_required_map_i64_i32 field_277;
  278: struct_required_map_i64_i64 field_278;
  279: struct_required_map_i64_float field_279;
  280: struct_required_map_i64_double field_280;
  281: struct_required_map_i64_binary field_281;
  282: struct_required_map_i64_string field_282;
  283: struct_required_map_string_set_string field_283;
  284: struct_required_map_string_set_i64 field_284;
  285: struct_required_map_i64_set_string field_285;
  286: struct_required_map_i64_set_i64 field_286;
  287: struct_required_list_bool_cpp_ref field_287;
  288: struct_required_list_byte_cpp_ref field_288;
  289: struct_required_list_i16_cpp_ref field_289;
  290: struct_required_list_i32_cpp_ref field_290;
  291: struct_required_list_i64_cpp_ref field_291;
  292: struct_required_list_float_cpp_ref field_292;
  293: struct_required_list_double_cpp_ref field_293;
  294: struct_required_list_binary_cpp_ref field_294;
  295: struct_required_list_string_cpp_ref field_295;
  296: struct_required_set_string_cpp_ref field_296;
  297: struct_required_set_i64_cpp_ref field_297;
  298: struct_required_map_string_bool_cpp_ref field_298;
  299: struct_required_map_string_byte_cpp_ref field_299;
  300: struct_required_map_string_i16_cpp_ref field_300;
  301: struct_required_map_string_i32_cpp_ref field_301;
  302: struct_required_map_string_i64_cpp_ref field_302;
  303: struct_required_map_string_float_cpp_ref field_303;
  304: struct_required_map_string_double_cpp_ref field_304;
  305: struct_required_map_string_binary_cpp_ref field_305;
  306: struct_required_map_string_string_cpp_ref field_306;
  307: struct_required_map_i64_bool_cpp_ref field_307;
  308: struct_required_map_i64_byte_cpp_ref field_308;
  309: struct_required_map_i64_i16_cpp_ref field_309;
  310: struct_required_map_i64_i32_cpp_ref field_310;
  311: struct_required_map_i64_i64_cpp_ref field_311;
  312: struct_required_map_i64_float_cpp_ref field_312;
  313: struct_required_map_i64_double_cpp_ref field_313;
  314: struct_required_map_i64_binary_cpp_ref field_314;
  315: struct_required_map_i64_string_cpp_ref field_315;
  316: struct_required_map_string_set_string_cpp_ref field_316;
  317: struct_required_map_string_set_i64_cpp_ref field_317;
  318: struct_required_map_i64_set_string_cpp_ref field_318;
  319: struct_required_map_i64_set_i64_cpp_ref field_319;
  320: struct_required_list_bool_shared_cpp_ref field_320;
  321: struct_required_list_byte_shared_cpp_ref field_321;
  322: struct_required_list_i16_shared_cpp_ref field_322;
  323: struct_required_list_i32_shared_cpp_ref field_323;
  324: struct_required_list_i64_shared_cpp_ref field_324;
  325: struct_required_list_float_shared_cpp_ref field_325;
  326: struct_required_list_double_shared_cpp_ref field_326;
  327: struct_required_list_binary_shared_cpp_ref field_327;
  328: struct_required_list_string_shared_cpp_ref field_328;
  329: struct_required_set_string_shared_cpp_ref field_329;
  330: struct_required_set_i64_shared_cpp_ref field_330;
  331: struct_required_map_string_bool_shared_cpp_ref field_331;
  332: struct_required_map_string_byte_shared_cpp_ref field_332;
  333: struct_required_map_string_i16_shared_cpp_ref field_333;
  334: struct_required_map_string_i32_shared_cpp_ref field_334;
  335: struct_required_map_string_i64_shared_cpp_ref field_335;
  336: struct_required_map_string_float_shared_cpp_ref field_336;
  337: struct_required_map_string_double_shared_cpp_ref field_337;
  338: struct_required_map_string_binary_shared_cpp_ref field_338;
  339: struct_required_map_string_string_shared_cpp_ref field_339;
  340: struct_required_map_i64_bool_shared_cpp_ref field_340;
  341: struct_required_map_i64_byte_shared_cpp_ref field_341;
  342: struct_required_map_i64_i16_shared_cpp_ref field_342;
  343: struct_required_map_i64_i32_shared_cpp_ref field_343;
  344: struct_required_map_i64_i64_shared_cpp_ref field_344;
  345: struct_required_map_i64_float_shared_cpp_ref field_345;
  346: struct_required_map_i64_double_shared_cpp_ref field_346;
  347: struct_required_map_i64_binary_shared_cpp_ref field_347;
  348: struct_required_map_i64_string_shared_cpp_ref field_348;
  349: struct_required_map_string_set_string_shared_cpp_ref field_349;
  350: struct_required_map_string_set_i64_shared_cpp_ref field_350;
  351: struct_required_map_i64_set_string_shared_cpp_ref field_351;
  352: struct_required_map_i64_set_i64_shared_cpp_ref field_352;
  353: struct_required_bool field_353;
  354: struct_required_byte field_354;
  355: struct_required_i16 field_355;
  356: struct_required_i32 field_356;
  357: struct_required_i64 field_357;
  358: struct_required_float field_358;
  359: struct_required_double field_359;
  360: struct_required_binary field_360;
  361: struct_required_string field_361;
  362: struct_required_bool_custom_default field_362;
  363: struct_required_byte_custom_default field_363;
  364: struct_required_i16_custom_default field_364;
  365: struct_required_i32_custom_default field_365;
  366: struct_required_i64_custom_default field_366;
  367: struct_required_float_custom_default field_367;
  368: struct_required_double_custom_default field_368;
  369: struct_required_binary_custom_default field_369;
  370: struct_required_string_custom_default field_370;
  371: struct_required_bool_alternative_custom_default field_371;
  372: struct_required_byte_alternative_custom_default field_372;
  373: struct_required_i16_alternative_custom_default field_373;
  374: struct_required_i32_alternative_custom_default field_374;
  375: struct_required_i64_alternative_custom_default field_375;
  376: struct_required_float_alternative_custom_default field_376;
  377: struct_required_double_alternative_custom_default field_377;
  378: struct_required_binary_alternative_custom_default field_378;
  379: struct_required_string_alternative_custom_default field_379;
  380: struct_terse_list_bool field_380;
  381: struct_terse_list_byte field_381;
  382: struct_terse_list_i16 field_382;
  383: struct_terse_list_i32 field_383;
  384: struct_terse_list_i64 field_384;
  385: struct_terse_list_float field_385;
  386: struct_terse_list_double field_386;
  387: struct_terse_list_binary field_387;
  388: struct_terse_list_string field_388;
  389: struct_terse_set_string field_389;
  390: struct_terse_set_i64 field_390;
  391: struct_terse_map_string_bool field_391;
  392: struct_terse_map_string_byte field_392;
  393: struct_terse_map_string_i16 field_393;
  394: struct_terse_map_string_i32 field_394;
  395: struct_terse_map_string_i64 field_395;
  396: struct_terse_map_string_float field_396;
  397: struct_terse_map_string_double field_397;
  398: struct_terse_map_string_binary field_398;
  399: struct_terse_map_string_string field_399;
  400: struct_terse_map_i64_bool field_400;
  401: struct_terse_map_i64_byte field_401;
  402: struct_terse_map_i64_i16 field_402;
  403: struct_terse_map_i64_i32 field_403;
  404: struct_terse_map_i64_i64 field_404;
  405: struct_terse_map_i64_float field_405;
  406: struct_terse_map_i64_double field_406;
  407: struct_terse_map_i64_binary field_407;
  408: struct_terse_map_i64_string field_408;
  409: struct_terse_map_string_set_string field_409;
  410: struct_terse_map_string_set_i64 field_410;
  411: struct_terse_map_i64_set_string field_411;
  412: struct_terse_map_i64_set_i64 field_412;
  413: struct_terse_list_bool_cpp_ref field_413;
  414: struct_terse_list_byte_cpp_ref field_414;
  415: struct_terse_list_i16_cpp_ref field_415;
  416: struct_terse_list_i32_cpp_ref field_416;
  417: struct_terse_list_i64_cpp_ref field_417;
  418: struct_terse_list_float_cpp_ref field_418;
  419: struct_terse_list_double_cpp_ref field_419;
  420: struct_terse_list_binary_cpp_ref field_420;
  421: struct_terse_list_string_cpp_ref field_421;
  422: struct_terse_set_string_cpp_ref field_422;
  423: struct_terse_set_i64_cpp_ref field_423;
  424: struct_terse_map_string_bool_cpp_ref field_424;
  425: struct_terse_map_string_byte_cpp_ref field_425;
  426: struct_terse_map_string_i16_cpp_ref field_426;
  427: struct_terse_map_string_i32_cpp_ref field_427;
  428: struct_terse_map_string_i64_cpp_ref field_428;
  429: struct_terse_map_string_float_cpp_ref field_429;
  430: struct_terse_map_string_double_cpp_ref field_430;
  431: struct_terse_map_string_binary_cpp_ref field_431;
  432: struct_terse_map_string_string_cpp_ref field_432;
  433: struct_terse_map_i64_bool_cpp_ref field_433;
  434: struct_terse_map_i64_byte_cpp_ref field_434;
  435: struct_terse_map_i64_i16_cpp_ref field_435;
  436: struct_terse_map_i64_i32_cpp_ref field_436;
  437: struct_terse_map_i64_i64_cpp_ref field_437;
  438: struct_terse_map_i64_float_cpp_ref field_438;
  439: struct_terse_map_i64_double_cpp_ref field_439;
  440: struct_terse_map_i64_binary_cpp_ref field_440;
  441: struct_terse_map_i64_string_cpp_ref field_441;
  442: struct_terse_map_string_set_string_cpp_ref field_442;
  443: struct_terse_map_string_set_i64_cpp_ref field_443;
  444: struct_terse_map_i64_set_string_cpp_ref field_444;
  445: struct_terse_map_i64_set_i64_cpp_ref field_445;
  446: struct_terse_list_bool_shared_cpp_ref field_446;
  447: struct_terse_list_byte_shared_cpp_ref field_447;
  448: struct_terse_list_i16_shared_cpp_ref field_448;
  449: struct_terse_list_i32_shared_cpp_ref field_449;
  450: struct_terse_list_i64_shared_cpp_ref field_450;
  451: struct_terse_list_float_shared_cpp_ref field_451;
  452: struct_terse_list_double_shared_cpp_ref field_452;
  453: struct_terse_list_binary_shared_cpp_ref field_453;
  454: struct_terse_list_string_shared_cpp_ref field_454;
  455: struct_terse_set_string_shared_cpp_ref field_455;
  456: struct_terse_set_i64_shared_cpp_ref field_456;
  457: struct_terse_map_string_bool_shared_cpp_ref field_457;
  458: struct_terse_map_string_byte_shared_cpp_ref field_458;
  459: struct_terse_map_string_i16_shared_cpp_ref field_459;
  460: struct_terse_map_string_i32_shared_cpp_ref field_460;
  461: struct_terse_map_string_i64_shared_cpp_ref field_461;
  462: struct_terse_map_string_float_shared_cpp_ref field_462;
  463: struct_terse_map_string_double_shared_cpp_ref field_463;
  464: struct_terse_map_string_binary_shared_cpp_ref field_464;
  465: struct_terse_map_string_string_shared_cpp_ref field_465;
  466: struct_terse_map_i64_bool_shared_cpp_ref field_466;
  467: struct_terse_map_i64_byte_shared_cpp_ref field_467;
  468: struct_terse_map_i64_i16_shared_cpp_ref field_468;
  469: struct_terse_map_i64_i32_shared_cpp_ref field_469;
  470: struct_terse_map_i64_i64_shared_cpp_ref field_470;
  471: struct_terse_map_i64_float_shared_cpp_ref field_471;
  472: struct_terse_map_i64_double_shared_cpp_ref field_472;
  473: struct_terse_map_i64_binary_shared_cpp_ref field_473;
  474: struct_terse_map_i64_string_shared_cpp_ref field_474;
  475: struct_terse_map_string_set_string_shared_cpp_ref field_475;
  476: struct_terse_map_string_set_i64_shared_cpp_ref field_476;
  477: struct_terse_map_i64_set_string_shared_cpp_ref field_477;
  478: struct_terse_map_i64_set_i64_shared_cpp_ref field_478;
  479: struct_terse_bool field_479;
  480: struct_terse_byte field_480;
  481: struct_terse_i16 field_481;
  482: struct_terse_i32 field_482;
  483: struct_terse_i64 field_483;
  484: struct_terse_float field_484;
  485: struct_terse_double field_485;
  486: struct_terse_binary field_486;
  487: struct_terse_string field_487;
  488: struct_terse_bool_custom_default field_488;
  489: struct_terse_byte_custom_default field_489;
  490: struct_terse_i16_custom_default field_490;
  491: struct_terse_i32_custom_default field_491;
  492: struct_terse_i64_custom_default field_492;
  493: struct_terse_float_custom_default field_493;
  494: struct_terse_double_custom_default field_494;
  495: struct_terse_binary_custom_default field_495;
  496: struct_terse_string_custom_default field_496;
  497: struct_terse_bool_alternative_custom_default field_497;
  498: struct_terse_byte_alternative_custom_default field_498;
  499: struct_terse_i16_alternative_custom_default field_499;
  500: struct_terse_i32_alternative_custom_default field_500;
  501: struct_terse_i64_alternative_custom_default field_501;
  502: struct_terse_float_alternative_custom_default field_502;
  503: struct_terse_double_alternative_custom_default field_503;
  504: struct_terse_binary_alternative_custom_default field_504;
  505: struct_terse_string_alternative_custom_default field_505;
  506: struct_optional_list_bool_box field_506;
  507: struct_optional_list_byte_box field_507;
  508: struct_optional_list_i16_box field_508;
  509: struct_optional_list_i32_box field_509;
  510: struct_optional_list_i64_box field_510;
  511: struct_optional_list_float_box field_511;
  512: struct_optional_list_double_box field_512;
  513: struct_optional_list_binary_box field_513;
  514: struct_optional_list_string_box field_514;
  515: struct_optional_set_string_box field_515;
  516: struct_optional_set_i64_box field_516;
  517: struct_optional_map_string_bool_box field_517;
  518: struct_optional_map_string_byte_box field_518;
  519: struct_optional_map_string_i16_box field_519;
  520: struct_optional_map_string_i32_box field_520;
  521: struct_optional_map_string_i64_box field_521;
  522: struct_optional_map_string_float_box field_522;
  523: struct_optional_map_string_double_box field_523;
  524: struct_optional_map_string_binary_box field_524;
  525: struct_optional_map_string_string_box field_525;
  526: struct_optional_map_i64_bool_box field_526;
  527: struct_optional_map_i64_byte_box field_527;
  528: struct_optional_map_i64_i16_box field_528;
  529: struct_optional_map_i64_i32_box field_529;
  530: struct_optional_map_i64_i64_box field_530;
  531: struct_optional_map_i64_float_box field_531;
  532: struct_optional_map_i64_double_box field_532;
  533: struct_optional_map_i64_binary_box field_533;
  534: struct_optional_map_i64_string_box field_534;
  535: struct_optional_map_string_set_string_box field_535;
  536: struct_optional_map_string_set_i64_box field_536;
  537: struct_optional_map_i64_set_string_box field_537;
  538: struct_optional_map_i64_set_i64_box field_538;
  539: struct_list_bool_lazy field_539;
  540: struct_list_byte_lazy field_540;
  541: struct_list_i16_lazy field_541;
  542: struct_list_i32_lazy field_542;
  543: struct_list_i64_lazy field_543;
  544: struct_list_float_lazy field_544;
  545: struct_list_double_lazy field_545;
  546: struct_list_binary_lazy field_546;
  547: struct_list_string_lazy field_547;
  548: struct_set_string_lazy field_548;
  549: struct_set_i64_lazy field_549;
  550: struct_map_string_bool_lazy field_550;
  551: struct_map_string_byte_lazy field_551;
  552: struct_map_string_i16_lazy field_552;
  553: struct_map_string_i32_lazy field_553;
  554: struct_map_string_i64_lazy field_554;
  555: struct_map_string_float_lazy field_555;
  556: struct_map_string_double_lazy field_556;
  557: struct_map_string_binary_lazy field_557;
  558: struct_map_string_string_lazy field_558;
  559: struct_map_i64_bool_lazy field_559;
  560: struct_map_i64_byte_lazy field_560;
  561: struct_map_i64_i16_lazy field_561;
  562: struct_map_i64_i32_lazy field_562;
  563: struct_map_i64_i64_lazy field_563;
  564: struct_map_i64_float_lazy field_564;
  565: struct_map_i64_double_lazy field_565;
  566: struct_map_i64_binary_lazy field_566;
  567: struct_map_i64_string_lazy field_567;
  568: struct_map_string_set_string_lazy field_568;
  569: struct_map_string_set_i64_lazy field_569;
  570: struct_map_i64_set_string_lazy field_570;
  571: struct_map_i64_set_i64_lazy field_571;
  572: struct_string_lazy field_572;
  573: union_empty field_573;
  574: union_list_bool field_574;
  575: union_list_byte field_575;
  576: union_list_i16 field_576;
  577: union_list_i32 field_577;
  578: union_list_i64 field_578;
  579: union_list_float field_579;
  580: union_list_double field_580;
  581: union_list_binary field_581;
  582: union_list_string field_582;
  583: union_set_string field_583;
  584: union_set_i64 field_584;
  585: union_map_string_bool field_585;
  586: union_map_string_byte field_586;
  587: union_map_string_i16 field_587;
  588: union_map_string_i32 field_588;
  589: union_map_string_i64 field_589;
  590: union_map_string_float field_590;
  591: union_map_string_double field_591;
  592: union_map_string_binary field_592;
  593: union_map_string_string field_593;
  594: union_map_i64_bool field_594;
  595: union_map_i64_byte field_595;
  596: union_map_i64_i16 field_596;
  597: union_map_i64_i32 field_597;
  598: union_map_i64_i64 field_598;
  599: union_map_i64_float field_599;
  600: union_map_i64_double field_600;
  601: union_map_i64_binary field_601;
  602: union_map_i64_string field_602;
  603: union_map_string_set_string field_603;
  604: union_map_string_set_i64 field_604;
  605: union_map_i64_set_string field_605;
  606: union_map_i64_set_i64 field_606;
  607: union_list_bool_cpp_ref field_607;
  608: union_list_byte_cpp_ref field_608;
  609: union_list_i16_cpp_ref field_609;
  610: union_list_i32_cpp_ref field_610;
  611: union_list_i64_cpp_ref field_611;
  612: union_list_float_cpp_ref field_612;
  613: union_list_double_cpp_ref field_613;
  614: union_list_binary_cpp_ref field_614;
  615: union_list_string_cpp_ref field_615;
  616: union_set_string_cpp_ref field_616;
  617: union_set_i64_cpp_ref field_617;
  618: union_map_string_bool_cpp_ref field_618;
  619: union_map_string_byte_cpp_ref field_619;
  620: union_map_string_i16_cpp_ref field_620;
  621: union_map_string_i32_cpp_ref field_621;
  622: union_map_string_i64_cpp_ref field_622;
  623: union_map_string_float_cpp_ref field_623;
  624: union_map_string_double_cpp_ref field_624;
  625: union_map_string_binary_cpp_ref field_625;
  626: union_map_string_string_cpp_ref field_626;
  627: union_map_i64_bool_cpp_ref field_627;
  628: union_map_i64_byte_cpp_ref field_628;
  629: union_map_i64_i16_cpp_ref field_629;
  630: union_map_i64_i32_cpp_ref field_630;
  631: union_map_i64_i64_cpp_ref field_631;
  632: union_map_i64_float_cpp_ref field_632;
  633: union_map_i64_double_cpp_ref field_633;
  634: union_map_i64_binary_cpp_ref field_634;
  635: union_map_i64_string_cpp_ref field_635;
  636: union_map_string_set_string_cpp_ref field_636;
  637: union_map_string_set_i64_cpp_ref field_637;
  638: union_map_i64_set_string_cpp_ref field_638;
  639: union_map_i64_set_i64_cpp_ref field_639;
  640: union_list_bool_shared_cpp_ref field_640;
  641: union_list_byte_shared_cpp_ref field_641;
  642: union_list_i16_shared_cpp_ref field_642;
  643: union_list_i32_shared_cpp_ref field_643;
  644: union_list_i64_shared_cpp_ref field_644;
  645: union_list_float_shared_cpp_ref field_645;
  646: union_list_double_shared_cpp_ref field_646;
  647: union_list_binary_shared_cpp_ref field_647;
  648: union_list_string_shared_cpp_ref field_648;
  649: union_set_string_shared_cpp_ref field_649;
  650: union_set_i64_shared_cpp_ref field_650;
  651: union_map_string_bool_shared_cpp_ref field_651;
  652: union_map_string_byte_shared_cpp_ref field_652;
  653: union_map_string_i16_shared_cpp_ref field_653;
  654: union_map_string_i32_shared_cpp_ref field_654;
  655: union_map_string_i64_shared_cpp_ref field_655;
  656: union_map_string_float_shared_cpp_ref field_656;
  657: union_map_string_double_shared_cpp_ref field_657;
  658: union_map_string_binary_shared_cpp_ref field_658;
  659: union_map_string_string_shared_cpp_ref field_659;
  660: union_map_i64_bool_shared_cpp_ref field_660;
  661: union_map_i64_byte_shared_cpp_ref field_661;
  662: union_map_i64_i16_shared_cpp_ref field_662;
  663: union_map_i64_i32_shared_cpp_ref field_663;
  664: union_map_i64_i64_shared_cpp_ref field_664;
  665: union_map_i64_float_shared_cpp_ref field_665;
  666: union_map_i64_double_shared_cpp_ref field_666;
  667: union_map_i64_binary_shared_cpp_ref field_667;
  668: union_map_i64_string_shared_cpp_ref field_668;
  669: union_map_string_set_string_shared_cpp_ref field_669;
  670: union_map_string_set_i64_shared_cpp_ref field_670;
  671: union_map_i64_set_string_shared_cpp_ref field_671;
  672: union_map_i64_set_i64_shared_cpp_ref field_672;
  673: union_bool field_673;
  674: union_byte field_674;
  675: union_i16 field_675;
  676: union_i32 field_676;
  677: union_i64 field_677;
  678: union_float field_678;
  679: union_double field_679;
  680: union_binary field_680;
  681: union_string field_681;
} (thrift.uri="facebook.com/thrift/test/testset/struct_all")
